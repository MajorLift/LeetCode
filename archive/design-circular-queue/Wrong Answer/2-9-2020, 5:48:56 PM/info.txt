{"id":301864715,"lang":"c","lang_name":"C","time":"3 years, 7 months","timestamp":1581299336,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/301864715/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"N/A","code":"\n\n\ntypedef struct {\n    int* array;\n    int head;\n    int tail;\n    int size;\n    int curr_size;\n} MyCircularQueue;\n\n/** Initialize your data structure here. Set the size of the queue to be k. */\n\nMyCircularQueue* myCircularQueueCreate(int k) {\n    MyCircularQueue* queue = (MyCircularQueue*) malloc(sizeof(MyCircularQueue));\n    queue->array = (int*) malloc(sizeof(int) * k);\n    queue->head = 0;\n    queue->tail = k - 1;\n    queue->size = k;\n    queue->curr_size = 0;\n    return queue;\n}\n\n/** Checks whether the circular queue is empty or not. */\nbool myCircularQueueIsEmpty(MyCircularQueue* obj) {\n    return obj->curr_size <= 0;\n}\n\n/** Checks whether the circular queue is full or not. */\nbool myCircularQueueIsFull(MyCircularQueue* obj) {\n    return obj->curr_size >= obj->size;\n}\n\n/** Insert an element into the circular queue. Return true if the operation is successful. */\nbool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {\n    if(myCircularQueueIsFull(obj)){\n        return false;\n    }\n    if(myCircularQueueIsEmpty(obj)){\n        obj->head = 0;\n        obj->tail = 0;\n    }\n    obj->tail = (obj->tail + 1) % obj->size;\n    obj->array[obj->tail] = value;\n    obj->curr_size += 1;\n    return true;\n}\n\n/** Delete an element from the circular queue. Return true if the operation is successful. */\nbool myCircularQueueDeQueue(MyCircularQueue* obj) {\n    if(myCircularQueueIsEmpty(obj)){\n        return false;\n    }\n    obj->head = (obj->head + 1) % obj->size;\n    obj->curr_size -= 1;\n    return true;\n}\n\n/** Get the front item from the queue. */\nint myCircularQueueFront(MyCircularQueue* obj) {\n    if(myCircularQueueIsEmpty(obj)) {\n        return -1;\n    }\n    return obj->array[obj->head];\n}\n\n/** Get the last item from the queue. */\nint myCircularQueueRear(MyCircularQueue* obj) {\n    if(myCircularQueueIsEmpty(obj)) {\n        return -1;\n    }\n    return obj->array[obj->tail];\n}\n\nvoid myCircularQueueFree(MyCircularQueue* obj) {\n    free(obj->array);\n    free(obj);\n}\n\n/**\n * Your MyCircularQueue struct will be instantiated and called as such:\n * MyCircularQueue* obj = myCircularQueueCreate(k);\n * bool param_1 = myCircularQueueEnQueue(obj, value);\n \n * bool param_2 = myCircularQueueDeQueue(obj);\n \n * int param_3 = myCircularQueueFront(obj);\n \n * int param_4 = myCircularQueueRear(obj);\n \n * bool param_5 = myCircularQueueIsEmpty(obj);\n \n * bool param_6 = myCircularQueueIsFull(obj);\n \n * myCircularQueueFree(obj);\n*/","compare_result":"1110010010100000000000000000000000000000000000000000","title_slug":"design-circular-queue","has_notes":false,"flag_type":1}