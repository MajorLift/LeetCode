{"id":938128024,"lang":"python3","lang_name":"Python3","time":"4 months, 3 weeks","timestamp":1682211059,"status":10,"status_display":"Accepted","runtime":"695 ms","url":"/submissions/detail/938128024/","is_pending":"Not Pending","title":"Longest String Chain","memory":"14.4 MB","code":"class Solution:\n    def longestStrChain(self, words) -> int:\n        length_map = defaultdict(set)\n        for word in words:\n            length_map[len(word)].add(word)\n        \n        adj = defaultdict(list)\n        indegree = {w: 0 for w in words}\n        for i in length_map.keys():\n            if i + 1 not in length_map:\n                continue\n            for shorter, longer in product(length_map[i], length_map[i + 1]):\n                if self.is_predecessor(shorter, longer):\n                    adj[shorter].append(longer)\n                    indegree[longer] += 1\n\n        dist = {w: 0 for w in words}\n        queue = deque([k for k,v in indegree.items() if v == 0])\n        while queue:\n            node = queue.popleft()\n            for child in adj[node]:\n                dist[child] = max(dist[child], dist[node] + 1)\n                indegree[child] -= 1\n                if indegree[child] == 0:\n                    queue.append(child)\n        return 1 + max(dist.values())\n            \n    def is_predecessor(self, shorter, longer):\n        if len(shorter) + 1 != len(longer):\n            return False\n        skips = 0\n        i = j = 0\n        while j < len(longer):\n            if i < len(shorter) and shorter[i] == longer[j]:\n                i += 1\n                j += 1\n            else:\n                j += 1\n                skips += 1\n        return skips == 1\n            ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-string-chain","has_notes":true,"flag_type":1}