{"id":885362917,"lang":"python3","lang_name":"Python3","time":"7 months, 2 weeks","timestamp":1674697661,"status":10,"status_display":"Accepted","runtime":"93 ms","url":"/submissions/detail/885362917/","is_pending":"Not Pending","title":"Swim in Rising Water","memory":"14.7 MB","code":"class Solution:\n    def swimInWater(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        visited = set([(0, 0)])\n        pq = [(grid[0][0], 0, 0)]\n        depth = 0\n        while pq:\n            w, i, j = heappop(pq)\n            depth = max(depth, w)\n            if i == j == n - 1:\n                break\n            for x, y in ((i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)):\n                if 0 <= x < n and 0 <= y < n and (x, y) not in visited:\n                    heappush(pq, (grid[x][y], x, y))\n                    visited.add((x, y))\n        return depth","compare_result":"1111111111111111111111111111111111111111111","title_slug":"swim-in-rising-water","has_notes":false,"flag_type":1}