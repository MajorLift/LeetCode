{"id":884871892,"lang":"python3","lang_name":"Python3","time":"7 months, 2 weeks","timestamp":1674631499,"status":10,"status_display":"Accepted","runtime":"177 ms","url":"/submissions/detail/884871892/","is_pending":"Not Pending","title":"Swim in Rising Water","memory":"14.7 MB","code":"class Solution:\n    def swimInWater(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        def dfs(t):\n            visited = set([(0, 0)])\n            stack = [(0, 0)]\n            while stack:\n                i, j = stack.pop()\n                if i == j == n - 1:\n                    return True\n                for x, y in ((i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)):\n                    if 0 <= x < n and 0 <= y < n and (x, y) not in visited and grid[x][y] <= t:\n                        stack.append((x, y))\n                        visited.add((x, y))\n            return False\n        return bisect_left([i for i in range(0, n * n)], True, lo=grid[0][0], key=lambda x: dfs(x))","compare_result":"1111111111111111111111111111111111111111111","title_slug":"swim-in-rising-water","has_notes":false,"flag_type":1}