{"id":860595400,"lang":"java","lang_name":"Java","time":"9Â months","timestamp":1671183179,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/860595400/","is_pending":"Not Pending","title":"Permutations II","memory":"N/A","code":"class Solution {\n    private final List<List<Integer>> output = new ArrayList<>();\n    private int[] input;\n\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        this.input = nums;\n        Arrays.sort(this.input);\n        backtrack(0);\n        return this.output;\n    }\n\n    private void backtrack(int start) {\n        if (start == this.input.length) {\n            List<Integer> permutation = new ArrayList<>();\n            for (int num : this.input) permutation.add(num);\n            this.output.add(permutation);\n            return;\n        }\n        for (int i = start; i < this.input.length; ++i) {\n            if (i > start && this.input[i] == this.input[i - 1]) continue;\n            swap(start, i);\n            backtrack(start + 1);\n            swap(start, i);\n        }\n    }\n\n    private void swap(int i, int j) {\n        int tmp = this.input[i];\n        this.input[i] = this.input[j];\n        this.input[j] = tmp;\n    }\n}","compare_result":"111111111001101111100000111110100","title_slug":"permutations-ii","has_notes":false,"flag_type":1}