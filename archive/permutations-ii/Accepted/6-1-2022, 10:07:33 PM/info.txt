{"id":712550529,"lang":"python3","lang_name":"Python3","time":"1Â year, 3Â months","timestamp":1654146453,"status":10,"status_display":"Accepted","runtime":"86 ms","url":"/submissions/detail/712550529/","is_pending":"Not Pending","title":"Permutations II","memory":"14.4 MB","code":"class Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        n = len(nums)\n        output = []\n        \n        def backtrack(first = 0):\n            if first == n:\n                output.append(nums[:])\n            else:\n                lookup = set()\n                for i in range(first, n):\n                    if nums[i] not in lookup:\n                        nums[first], nums[i] = nums[i], nums[first]\n                        backtrack(first + 1)\n                        nums[first], nums[i] = nums[i], nums[first]\n                        lookup.add(nums[i])\n                    \n        backtrack()\n        return output","compare_result":"111111111111111111111111111111111","title_slug":"permutations-ii","has_notes":false,"flag_type":1}