{"id":860609401,"lang":"java","lang_name":"Java","time":"9Â months","timestamp":1671185817,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/860609401/","is_pending":"Not Pending","title":"Permutations II","memory":"43 MB","code":"class Solution {\n    private final List<List<Integer>> output = new ArrayList<>();\n    private int[] input;\n\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        this.input = nums;\n        Arrays.sort(this.input);\n        boolean[] used = new boolean[this.input.length];\n        Arrays.fill(used, false);\n        backtrack(new ArrayList<>(), used);\n        return this.output;\n    }\n\n    private void backtrack(List<Integer> path, boolean[] used) {\n        if (path.size() == this.input.length) {\n            this.output.add(new ArrayList<>(path));\n            return;\n        }\n        for (int i = 0; i < this.input.length; ++i) {\n            if (used[i] == true || i > 0 && used[i - 1] == true && this.input[i] == this.input[i - 1]) continue;\n            boolean[] newUsed = Arrays.copyOf(used, used.length);\n            newUsed[i] = true;\n            List<Integer> newPath = new ArrayList<>(path);\n            newPath.add(this.input[i]);\n            backtrack(newPath, newUsed);\n        }\n    }\n}","compare_result":"111111111111111111111111111111111","title_slug":"permutations-ii","has_notes":false,"flag_type":1}