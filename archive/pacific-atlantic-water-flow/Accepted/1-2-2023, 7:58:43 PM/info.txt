{"id":870163018,"lang":"python3","lang_name":"Python3","time":"8 months, 1 week","timestamp":1672718323,"status":10,"status_display":"Accepted","runtime":"379 ms","url":"/submissions/detail/870163018/","is_pending":"Not Pending","title":"Pacific Atlantic Water Flow","memory":"15.8 MB","code":"class Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        m, n = len(heights), len(heights[0])\n\n        def dfs(coord: tuple[int, int], visited: set[tuple[int, int]]) -> None:\n            r, c = coord\n            visited.add((r, c))\n            for i, j in ((r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)):\n                if 0 <= i < m and 0 <= j < n and (i, j) not in visited and heights[i][j] >= heights[r][c]:\n                    dfs((i, j), visited)\n\n        pacific, atlantic = set(), set()\n        [dfs((x, y), pacific) for x, y in [*[(i, 0) for i in range(m)], *[(0, j + 1) for j in range(n - 1)]]]\n        [dfs((x, y), atlantic) for x, y in [*[(i, n - 1) for i in range(m)], *[(m - 1, j) for j in range(n - 1)]]]\n        return pacific & atlantic\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"pacific-atlantic-water-flow","has_notes":false,"flag_type":1}