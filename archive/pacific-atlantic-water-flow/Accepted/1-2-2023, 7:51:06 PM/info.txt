{"id":870159121,"lang":"python3","lang_name":"Python3","time":"8 months, 1 week","timestamp":1672717866,"status":10,"status_display":"Accepted","runtime":"515 ms","url":"/submissions/detail/870159121/","is_pending":"Not Pending","title":"Pacific Atlantic Water Flow","memory":"15.9 MB","code":"class Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        m, n = len(heights), len(heights[0])\n\n        def dfs(coord: tuple[int, int], visited: set[tuple[int, int]]) -> set[tuple[int, int]]:\n            r, c = coord\n            visited.add((r, c))\n            for i, j in ((r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)):\n                if 0 <= i < m and 0 <= j < n and (i, j) not in visited and heights[i][j] >= heights[r][c]:\n                    dfs((i, j), visited)\n            return visited\n\n        pacific, atlantic = set(), set()\n        for i in range(m):\n            dfs((i, 0), pacific)\n            dfs((i, n - 1), atlantic)\n        for j in range(n - 1):\n            dfs((0, j + 1), pacific)\n            dfs((m - 1, j), atlantic)\n        return [[i, j] for i, j in pacific.intersection(atlantic)]\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"pacific-atlantic-water-flow","has_notes":false,"flag_type":1}