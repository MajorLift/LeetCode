{"id":870149334,"lang":"javascript","lang_name":"JavaScript","time":"8 months, 1 week","timestamp":1672716696,"status":10,"status_display":"Accepted","runtime":"363 ms","url":"/submissions/detail/870149334/","is_pending":"Not Pending","title":"Pacific Atlantic Water Flow","memory":"64.1 MB","code":"/**\n * @param {number[][]} heights\n * @return {number[][]}\n */\nvar pacificAtlantic = function(heights) {\n    const [m, n] = [heights.length, heights[0].length]\n    const adj = Array.from({ length: m }, () => (Array.from({ length: n }, () => (new Array()))))\n    for (let i = 0; i < m; ++i) {\n        for (let j = 0; j < n; ++j) {\n            for (const [r, c] of [[i - 1, j], [i + 1, j], [i, j - 1], [i, j + 1]]) {\n                if (r >= 0 && r < m && c >= 0 && c < n && heights[i][j] >= heights[r][c]) {\n                    adj[r][c].push([i, j])\n                }\n            }\n        }\n    }\n    function dfs(stack = [], output = new Set()) {\n        while (stack.length) {\n            const [i, j] = stack.pop()\n            output.add([i, j].join(','))\n            for (const u of adj[i][j]) {\n                if (!output.has(u.join(','))) {\n                    stack.push(u)\n                }\n            }\n        }\n        return output\n    }\n    const pacific = dfs([...Array.from({ length: m }, (_, i) => ([i, 0])), ...Array.from({ length: n - 1 }, (_, j) => ([0, j + 1]))])\n    const atlantic = dfs([...Array.from({ length: m }, (_, i) => ([i, n - 1])), ...Array.from({ length: n - 1 }, (_, j) => ([m - 1, j]))])\n    return [...pacific].filter((e) => atlantic.has(e)).map((e) => e.split(','))\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"pacific-atlantic-water-flow","has_notes":false,"flag_type":1}