{"id":870107814,"lang":"python3","lang_name":"Python3","time":"8 months, 1 week","timestamp":1672711136,"status":10,"status_display":"Accepted","runtime":"437 ms","url":"/submissions/detail/870107814/","is_pending":"Not Pending","title":"Pacific Atlantic Water Flow","memory":"17.7 MB","code":"class Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        m, n = len(heights), len(heights[0])\n        \n        adj = [[[] for j in range(n)] for i in range(m)]\n        for i in range(m):\n            for j in range(n):\n                for r, c in ((i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)):\n                    if 0 <= r < m and 0 <= c < n and heights[i][j] >= heights[r][c]:\n                        adj[r][c].append((i, j))\n\n        def dfs(stack: list[tuple[int, int]], output: set[tuple[int, int]]) -> set[tuple[int, int]]:\n            while stack:\n                i, j = stack.pop()\n                output.add((i, j))\n                for u in adj[i][j]:\n                    if u not in output:\n                        stack.append(u)\n            return output\n\n        pacific = dfs([(i, 0) for i in range(m)] + [(0, j) for j in range(1, n)], set())\n        atlantic = dfs([(i, n - 1) for i in range(m)] + [(m - 1, j) for j in range(n - 1)], set())\n        return [[i, j] for i, j in pacific.intersection(atlantic)]\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"pacific-atlantic-water-flow","has_notes":false,"flag_type":1}