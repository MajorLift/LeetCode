{"id":870797712,"lang":"javascript","lang_name":"JavaScript","time":"8 months, 1 week","timestamp":1672791646,"status":10,"status_display":"Accepted","runtime":"156 ms","url":"/submissions/detail/870797712/","is_pending":"Not Pending","title":"Pacific Atlantic Water Flow","memory":"50 MB","code":"/**\n * @param {number[][]} heights\n * @return {number[][]}\n */\nvar pacificAtlantic = function(heights) {\n    const [m, n] = [heights.length, heights[0].length]\n    function dfs(r, c, visited) {\n        visited.add([r, c].join(','))\n        for (const [i, j] of [[r - 1, c], [r + 1, c], [r, c - 1], [r, c + 1]]) {\n            if (i >= 0 && i < m && j >= 0 && j < n \n                && !visited.has([i, j].join(',')) \n                && heights[i][j] >= heights[r][c]) {\n                dfs(i, j, visited)\n            }\n        }\n        return visited\n    }\n    const [pacific, atlantic] = [new Set(), new Set()]\n    for (let i = 0; i < m; ++i) {\n        dfs(i, 0, pacific)\n        dfs(i, n - 1, atlantic)\n    }\n    for (let j = 0; j < n - 1; ++j) {\n        dfs(0, j + 1, pacific)\n        dfs(m - 1, j, atlantic)\n    }\n    return [...pacific].filter((e) => atlantic.has(e)).map((e) => e.split(','))\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"pacific-atlantic-water-flow","has_notes":false,"flag_type":1}