{"id":937096035,"lang":"python3","lang_name":"Python3","time":"4 months, 3 weeks","timestamp":1682020243,"status":10,"status_display":"Accepted","runtime":"391 ms","url":"/submissions/detail/937096035/","is_pending":"Not Pending","title":"Detect Squares","memory":"16.2 MB","code":"class DetectSquares:\n\n    def __init__(self):\n        self.points = defaultdict(int)\n        self.points_x, self.points_y = defaultdict(list), defaultdict(list)\n\n    def add(self, point: List[int]) -> None:\n        x, y = point\n        self.points[(x, y)] += 1\n        self.points_x[x].append(y)\n        self.points_y[y].append(x)\n\n    def count(self, point: List[int]) -> int:\n        x0, y0 = point\n        xdist, ydist = defaultdict(set), defaultdict(set)\n        for x in self.points_y[y0]:\n            xdist[abs(x - x0)].add(x)\n        for y in self.points_x[x0]:\n            ydist[abs(y - y0)].add(y)\n        \n        return sum(\n            self.points[(x, y)] \n            * self.points[(x, y0)] \n            * self.points[(x0, y)]\n            for edge in xdist.keys() & ydist.keys() - {0}\n            for x, y in product(xdist[edge], ydist[edge]))","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"detect-squares","has_notes":false,"flag_type":1}