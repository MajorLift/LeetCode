{"id":304492104,"lang":"java","lang_name":"Java","time":"3 years, 6 months","timestamp":1582021563,"status":10,"status_display":"Accepted","runtime":"27 ms","url":"/submissions/detail/304492104/","is_pending":"Not Pending","title":"Clone Graph","memory":"38.7 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    \n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    \n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    \n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    public HashMap<Integer, Node> map = new HashMap<>();\n    \n    public Node cloneGraph(Node node) {\n        return clone(node);\n    }    \n    \n    public Node clone(Node node){\n        if(node == null) return null;\n        if(map.containsKey(node.val)) return map.get(node.val);\n        \n        Node newNode = new Node(node.val, new ArrayList<Node>());\n        map.put(newNode.val, newNode);\n        for(Node neighbor : node.neighbors){\n            newNode.neighbors.add(clone(neighbor));\n        }\n        return newNode;\n    }\n}","compare_result":"111111111111111111111","title_slug":"clone-graph","has_notes":false,"flag_type":1}