{"id":867682943,"lang":"java","lang_name":"Java","time":"8 months, 2 weeks","timestamp":1672341555,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/867682943/","is_pending":"Not Pending","title":"Clone Graph","memory":"42.6 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    private Map<Integer, Node> visited = new HashMap<>();\n    public Node cloneGraph(Node node) {\n        if (node == null) return node;\n        if (visited.containsKey(node.val)) return visited.get(node.val);\n        Node clone = new Node(node.val);\n        visited.put(clone.val, clone);\n        for (Node v : node.neighbors) clone.neighbors.add(this.cloneGraph(v));            \n        return clone;\n    }\n}","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false,"flag_type":1}