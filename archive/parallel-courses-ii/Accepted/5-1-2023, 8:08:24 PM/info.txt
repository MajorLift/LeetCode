{"id":942966941,"lang":"python3","lang_name":"Python3","time":"4 months, 1 week","timestamp":1682996904,"status":10,"status_display":"Accepted","runtime":"1164 ms","url":"/submissions/detail/942966941/","is_pending":"Not Pending","title":"Parallel Courses II","memory":"23.5 MB","code":"class Solution:\n    def minNumberOfSemesters(self, n: int, relations: List[List[int]], k: int) -> int:\n        adj, indegree = [[] for _ in range(n + 1)], [-inf] + [0] * n\n        for u, v in relations:\n            adj[u].append(v)\n            indegree[v] += 1\n\n        @cache\n        def dp(state=(1 << (n + 1)) - 1, indegree=tuple(indegree)):\n            if state == 1: return 0\n            starts = [node for node in range(1, n + 1)\n                if state & 1 << node and indegree[node] == 0]\n            global_min = +inf\n            for nodes in combinations(starts, min(k, len(starts))):\n                new_state, new_indegree = state, list(indegree)\n                for node in nodes:\n                    new_state ^= 1 << node\n                    for child in adj[node]:\n                        new_indegree[child] -= 1\n                global_min = min(global_min, \n                    1 + dp(new_state, tuple(new_indegree)))\n            return global_min\n\n        return dp()\n            ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"parallel-courses-ii","has_notes":false,"flag_type":1}