{"id":939707162,"lang":"python3","lang_name":"Python3","time":"4Â months, 2Â weeks","timestamp":1682453295,"status":10,"status_display":"Accepted","runtime":"1094 ms","url":"/submissions/detail/939707162/","is_pending":"Not Pending","title":"Parallel Courses II","memory":"23.4 MB","code":"class Solution:\n    def minNumberOfSemesters(self, n: int, relations: List[List[int]], k: int) -> int:\n        adj = [[] for _ in range(n + 1)]\n        indegree = [-inf] + [0 for _ in range(n)]\n        for u, v in relations:\n            adj[u].append(v)\n            indegree[v] += 1\n        \n        @cache\n        def dp(state: int, indegree: tuple[int]) -> int:\n            if state == 1:\n                return 0\n            starts = [node for node in range(1, n + 1) if state & 1 << node and indegree[node] == 0]\n            global_min = +inf\n            for nodes in combinations(starts, min(k, len(starts))):\n                new_state, new_indegree = state, list(indegree)\n                for node in nodes:\n                    new_state ^= 1 << node\n                    for child in adj[node]:\n                        new_indegree[child] -= 1\n                local_min = 1 + dp(new_state, tuple(new_indegree))\n                global_min = min(global_min, local_min)\n            return global_min\n\n        return dp((1 << (n + 1)) - 1, tuple(indegree))\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"parallel-courses-ii","has_notes":false,"flag_type":1}