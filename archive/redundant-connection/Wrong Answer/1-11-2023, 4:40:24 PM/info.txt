{"id":876458908,"lang":"python3","lang_name":"Python3","time":"8Â months","timestamp":1673484024,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/876458908/","is_pending":"Not Pending","title":"Redundant Connection","memory":"N/A","code":"class Solution:\n    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges)\n        adj = [[0 for _ in range(n)] for _ in range(n)]\n        for u, v in edges:\n            adj[u - 1][v - 1] = 1\n            adj[v - 1][u - 1] = 1\n        \n        def dfs(x, y):\n            visited.add(x)\n            if x == y:\n                return True\n            for v, w in enumerate(adj[x]):\n                if w == 1 and v not in visited and dfs(v, y):\n                    return True\n            return False  \n\n        for u, v in edges:\n            adj[u - 1][v - 1] = 0\n            adj[v - 1][u - 1] = 0\n            visited = set()\n            if dfs(u - 1, v - 1):\n                return [u, v]\n            adj[u - 1][v - 1] = 1\n            adj[v - 1][u - 1] = 1\n            \n\n        \n            ","compare_result":"000000000000000000000000000000000000000","title_slug":"redundant-connection","has_notes":false,"flag_type":1}