{"id":876195739,"lang":"python3","lang_name":"Python3","time":"8Â months","timestamp":1673451772,"status":10,"status_display":"Accepted","runtime":"58 ms","url":"/submissions/detail/876195739/","is_pending":"Not Pending","title":"Redundant Connection","memory":"14.4 MB","code":"class UnionFind:\n    def __init__(self, n):\n        self.root = [i for i in range(n)]\n\n    def union(self, x, y):\n        rootX, rootY = self.find(x), self.find(y)\n        if rootX != rootY:\n            self.root[rootY] = rootX\n\n    def find(self, x):\n        if x == self.root[x]:\n            return x\n        self.root[x] = self.find(self.root[x])\n        return self.root[x]\n\n    def connected(self, x, y):\n        return self.find(x) == self.find(y)\n\nclass Solution:\n    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges)\n        uf = UnionFind(n)\n        for u, v in edges:\n            if uf.connected(u - 1, v - 1):\n                return [u, v]\n            uf.union(u - 1, v - 1)\n        \n        ","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection","has_notes":false,"flag_type":1}