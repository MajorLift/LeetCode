{"id":881541445,"lang":"python3","lang_name":"Python3","time":"7 months, 3 weeks","timestamp":1674178235,"status":10,"status_display":"Accepted","runtime":"7104 ms","url":"/submissions/detail/881541445/","is_pending":"Not Pending","title":"Min Cost to Connect All Points","memory":"126 MB","code":"class Solution:\n    def minCostConnectPoints(self, points: List[List[int]]) -> int:\n        edges = [(self.manhattan(a, b), tuple(a), tuple(b)) \\\n            for a, b in combinations(points, 2)]\n        heapify(edges)\n\n        cost = 0\n        uf = UnionFind()\n        while edges and uf.numEdges() <= len(points):\n            dist, a, b = heappop(edges)\n            if uf.connected(a, b):\n                continue\n            uf.union(a, b)\n            cost += dist\n        return cost\n        \n    def manhattan(self, a, b):\n        (x1, y1), (x2, y2) = a, b\n        return abs(x1 - x2) + abs(y1 - y2)\n\nclass UnionFind:\n    def __init__(self):\n        self.roots = dict()\n\n    def find(self, x):\n        if x not in self.roots:\n            return None\n        if x == self.roots[x]:\n            return x\n        self.roots[x] = self.find(self.roots[x])\n        return self.roots[x]\n\n    def union(self, x, y):\n        if x not in self.roots:\n            self.roots[x] = x\n        if y not in self.roots:\n            self.roots[y] = y\n        rootX, rootY = self.find(x), self.find(y)\n        if rootX != rootY:\n            self.roots[rootY] = rootX\n        \n    def connected(self, x, y):\n        rootX, rootY = self.find(x), self.find(y)\n        return rootX and rootY and rootX == rootY\n\n    def numEdges(self):\n        return len(self.roots.keys())","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-to-connect-all-points","has_notes":false,"flag_type":1}