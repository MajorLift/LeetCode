{"id":883220792,"lang":"python3","lang_name":"Python3","time":"7 months, 3 weeks","timestamp":1674410822,"status":10,"status_display":"Accepted","runtime":"1602 ms","url":"/submissions/detail/883220792/","is_pending":"Not Pending","title":"Min Cost to Connect All Points","memory":"14.6 MB","code":"class Node:\n    def __init__(self, idx, key):\n        self.idx = idx\n        self.key = key\n\n    def __lt__(self, other):\n        return self.key < other.key\n\n    def __repr__(self):\n        return \"(idx: %s, dist: %s)\" % (self.idx, self.key)\n\nclass Solution:\n    def minCostConnectPoints(self, points: List[List[int]]) -> int:\n        numVertices = len(points)\n        mst = set()\n        dist = [Node(0, 0)] + [Node(i, +math.inf) for i in range(1, numVertices)]\n        \n        cost = 0\n        while dist:\n            heapify(dist)\n            u = heappop(dist)\n            mst.add(u.idx)\n            cost += u.key\n            for v in dist:\n                if v.idx not in mst:\n                    w = self.manhattan(points[u.idx], points[v.idx])\n                    if w < v.key:\n                        v.key = w\n        return cost\n    \n    def manhattan(self, a, b):\n        (x1, y1), (x2, y2) = a, b\n        return abs(x1 - x2) + abs(y1 - y2)\n\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-to-connect-all-points","has_notes":false,"flag_type":1}