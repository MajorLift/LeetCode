{"id":872453203,"lang":"python3","lang_name":"Python3","time":"8 months, 1 week","timestamp":1672986888,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/872453203/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"N/A","code":"class Solution:\n    def orangesRotting(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        grid = grid\n        cnt = len([1 for i in range(m) for j in range(n) if grid[i][j] == 1])\n        if cnt == 0:\n            return 0\n\n        def dfs(r, c, minutes = 0):\n            nonlocal cnt\n            if cnt == 0:\n                return minutes\n            max_time = 0\n            for i, j in ((r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)):\n                if 0 <= i < m and 0 <= j < n and grid[i][j] == 1:\n                    grid[i][j] = 2\n                    cnt -= 1\n                    max_time = max(max_time, dfs(i, j, minutes + 1))\n            return max_time\n\n        rotten = [(i, j) for i in range(m) for j in range(n) if grid[i][j] == 2]\n        time = 0\n        for i, j in rotten:\n            time = max(time, dfs(i, j))\n        if cnt == 0 and time > 0:\n            return time\n        else:\n            return -1\n\n    ","compare_result":"111111111111111011111111111111111111111111111111111111110111011110111011101111101110111110100110101111011011011000001111011111111101010001010001110000001011110100011100011110011101110101010000101100110010011011001000110000100101110100000001110101011001000101010111001001001100010000110101101000101100010101","title_slug":"rotting-oranges","has_notes":false,"flag_type":1}