{"id":872441741,"lang":"python3","lang_name":"Python3","time":"8 months, 1 week","timestamp":1672985710,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/872441741/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"N/A","code":"class Solution:\n    def orangesRotting(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        fresh_cnt = len([1 for i in range(m) for j in range(n) if grid[i][j] == 1])\n        def dfs(r, c, minutes = 0):\n            nonlocal fresh_cnt\n            grid[r][c] = 2\n            fresh_cnt -= 1\n            print(fresh_cnt)\n            for i, j in ((r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)):\n                if 0 <= i < m and 0 <= j < n and grid[i][j] == 1:\n                    dfs(i, j, minutes + 1)\n            return minutes\n\n        rotten = [(i, j) for i in range(m) for j in range(n) if grid[i][j] == 2]\n        print(fresh_cnt)\n        if fresh_cnt == 0:\n            return max([dfs(i, j) for i, j in rotten])\n        else:\n            return -1\n","compare_result":"011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"rotting-oranges","has_notes":false,"flag_type":1}