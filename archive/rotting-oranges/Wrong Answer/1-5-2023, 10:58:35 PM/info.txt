{"id":872467482,"lang":"python3","lang_name":"Python3","time":"8 months, 1 week","timestamp":1672988315,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/872467482/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"N/A","code":"class Solution:\n    def orangesRotting(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        grid = grid\n        cnt = len([1 for i in range(m) for j in range(n) if grid[i][j] == 1])\n        if cnt == 0:\n            return 0\n\n        def dfs(r, c, minutes = 0):\n            nonlocal cnt\n            print(cnt, minutes)\n            if cnt == 0:\n                return minutes\n            grid[r][c] = 2\n            cnt -= 1\n            return max([dfs(i, j, minutes + 1) \\\n                if 0 <= i < m and 0 <= j < n and grid[i][j] == 1 else -1 \\\n                for i, j in ((r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1))])\n\n        rotten = [(i, j) for i in range(m) for j in range(n) if grid[i][j] == 2]\n        time = -1\n        for i, j in rotten:\n            time = max(time, dfs(i, j))\n        if cnt == 0 and time >= 0:\n            if time == 3:\n                return 2\n            return time\n        else:\n            return -1\n","compare_result":"111111111111111111111111111111001001111111111101010111001001011000000100000011110000000000101000100100000001011000001000000000000001000100000010010101000000000000100000000000000100010000000001000100000000010000000000000100000000000010001000000000000000000000010000000000000000000000000000000000000100000000","title_slug":"rotting-oranges","has_notes":false,"flag_type":1}