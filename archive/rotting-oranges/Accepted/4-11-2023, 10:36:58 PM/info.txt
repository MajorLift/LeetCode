{"id":932306699,"lang":"python3","lang_name":"Python3","time":"5Â months","timestamp":1681277818,"status":10,"status_display":"Accepted","runtime":"62 ms","url":"/submissions/detail/932306699/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"13.9 MB","code":"class Solution:\n    def orangesRotting(self, grid: List[List[int]]):\n        DIRECTIONS = ((0, 1), (1, 0), (0, -1), (-1, 0))\n        m, n = len(grid), len(grid[0])\n        fresh = set()\n        for i, j in product(range(m), range(n)):\n            if grid[i][j] == 1:\n                fresh.add((i, j))\n                grid[i][j] = 0\n        prev = len(fresh)\n        time = 0\n        while fresh:\n            for i, j in fresh:\n                for direction in DIRECTIONS:\n                    x, y = map(sum, zip((i, j), direction))\n                    if 0 <= x < m and 0 <= y < n:\n                        grid[i][j] |= grid[x][y] >> 1\n            for i, j in list(fresh):\n                grid[i][j] &= 1\n                if grid[i][j] & 1:\n                    grid[i][j] <<= 1\n                    fresh.remove((i, j))\n            if len(fresh) == prev:\n                return -1\n            prev = len(fresh)\n            time += 1\n        return time","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotting-oranges","has_notes":false,"flag_type":1}