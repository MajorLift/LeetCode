{"id":873044420,"lang":"python3","lang_name":"Python3","time":"8 months, 1 week","timestamp":1673065786,"status":10,"status_display":"Accepted","runtime":"51 ms","url":"/submissions/detail/873044420/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"13.8 MB","code":"from itertools import product\nfrom collections import deque\n\nclass Solution:\n    def orangesRotting(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        fresh = [(i, j) for i, j in product(range(m), range(n)) if grid[i][j] == 1]\n        if not fresh:\n            return 0\n        rotten = [(i, j) for i, j in product(range(m), range(n)) if grid[i][j] == 2]\n        if not rotten:\n            return -1\n\n        count, time = len(fresh), 0\n        queue = deque([*rotten])\n        while queue:\n            nextQueue = []\n            while queue:\n                r, c = queue.popleft()\n                for i, j in ((r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)):\n                    if 0 <= i < m and 0 <= j < n and grid[i][j] == 1:\n                        grid[i][j] = 2\n                        count -= 1\n                        nextQueue.append((i, j))\n            queue += nextQueue\n            if queue:\n                time += 1\n\n        return time if count == 0 else -1","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotting-oranges","has_notes":false,"flag_type":1}