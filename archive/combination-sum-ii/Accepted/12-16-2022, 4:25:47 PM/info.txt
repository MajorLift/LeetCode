{"id":860878784,"lang":"java","lang_name":"Java","time":"8 months, 4 weeks","timestamp":1671236747,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/860878784/","is_pending":"Not Pending","title":"Combination Sum II","memory":"42.9 MB","code":"class Solution {\n    private List<List<Integer>> output = new ArrayList<>();\n    private int[] input;\n\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        this.input = candidates;\n        Arrays.sort(this.input);\n        this.backtrack(new ArrayList<>(), 0, target);\n        return this.output;\n    }\n\n    private void backtrack(List<Integer> path, int start, int remainder) {\n        if (remainder == 0) {\n            this.output.add(new ArrayList<>(path));\n            return;\n        }\n        for (int i = start; i < this.input.length; ++i) {\n            if (i > start && this.input[i] == this.input[i - 1]) continue;\n            if (remainder - this.input[i] >= 0) {\n                path.add(this.input[i]);\n                this.backtrack(path, i + 1, remainder - this.input[i]);\n                path.remove(path.size() - 1);\n            }\n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false,"flag_type":1}