{"id":888453829,"lang":"python3","lang_name":"Python3","time":"7 months, 2 weeks","timestamp":1675128815,"status":10,"status_display":"Accepted","runtime":"105 ms","url":"/submissions/detail/888453829/","is_pending":"Not Pending","title":"Cheapest Flights Within K Stops","memory":"15.2 MB","code":"class Solution:\n    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:\n        adj = [[0] * n for _ in range(n)]\n        for u, v, w in flights:\n            adj[u][v] = w\n\n        dist = [(+math.inf, +math.inf)] * n\n        dist[src] = (0, 0)\n        pq = [(*dist[src], src)]\n        while pq:\n            cost_u, stops_u, u = heappop(pq)\n            if u == dst:\n                break\n\n            for v, w in enumerate(adj[u]):\n                if w == 0:\n                    continue\n\n                min_cost_v, min_stops_v = dist[v]\n                cost_uv, stops_uv = cost_u + w, stops_u + 1\n                \n                if cost_uv < min_cost_v:\n                    dist[v] = (cost_uv, stops_uv)\n\n                if (stops_uv <= k\n                    and (cost_uv < min_cost_v or stops_uv < min_stops_v)):\n                    heappush(pq, (cost_uv, stops_uv, v))\n        \n        min_cost_to_dst = dist[dst][0]\n        return min_cost_to_dst if min_cost_to_dst < +math.inf else -1","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"cheapest-flights-within-k-stops","has_notes":false,"flag_type":1}