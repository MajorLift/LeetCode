{"id":888205400,"lang":"javascript","lang_name":"JavaScript","time":"7 months, 2 weeks","timestamp":1675096040,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/888205400/","is_pending":"Not Pending","title":"Cheapest Flights Within K Stops","memory":"N/A","code":"/**\n * @param {number} n\n * @param {number[][]} flights\n * @param {number} src\n * @param {number} dst\n * @param {number} k\n * @return {number}\n */\nvar findCheapestPrice = function(n, flights, src, dst, k) {\n    const adj = flights.reduce((acc, [u, v, w]) => {\n        acc[u][v] = w\n        return acc\n    }, Array.from({ length: n }, () => new Array(n).fill(0)))\n\n    const dist = Array.from({ length: n }, () => [+Infinity, +Infinity])\n    dist[src] = [0, 0]\n\n    const pq = new PriorityQueue((a, b) => (a.cost - b.cost ? a.cost - b.cost : a.stops - b.stops))\n    pq.enqueue({ cost: 0, stops: 0, node: src })\n    while (!pq.isEmpty()) {\n        const { cost, stops, u } = pq.dequeue()\n        if (u === dst) break\n        for (const [v, w] of adj[u].entries) {\n            if (w === 0) return\n\n            const [min_cost_v, min_stops_v] = dist[v]\n            const [cost_v, stops_v] = [cost + w, stops + 1]\n\n            if (cost_v < min_cost_v \n                || (cost_v === min_cost_v && stops_v < min_stops_v)) {\n                dist[v] = [cost_v, stops_v]\n            }\n            if (stops_v < k \n                && (cost_v < min_cost_v || stops_v < min_stops_v)) {\n                pq.enqueue({ cost: cost_v, stops: stops_v, node: v })\n            }\n        }\n    }\n\n    const min_cost_to_dst = dist[dst][0]\n    return min_cost_to_dst < +Infinity ? min_cost_to_dst : -1\n}","compare_result":"0000000000000000000000000000000000000000000000000000","title_slug":"cheapest-flights-within-k-stops","has_notes":false,"flag_type":1}