{"id":932176019,"lang":"javascript","lang_name":"JavaScript","time":"5Â months","timestamp":1681254039,"status":10,"status_display":"Accepted","runtime":"62 ms","url":"/submissions/detail/932176019/","is_pending":"Not Pending","title":"Spiral Matrix","memory":"41.9 MB","code":"/**\n * @param {number[][]} matrix\n * @return {number[]}\n */\nfunction spiralOrder(matrix) {\n  if (!matrix.length) {\n    return [];\n  }\n\n  const rows = matrix.length;\n  const cols = matrix[0].length;\n  const visited = new Set();\n  const result = [];\n\n  function dfs(row, col, directionIndex) {\n    if (\n      row < 0 ||\n      row >= rows ||\n      col < 0 ||\n      col >= cols ||\n      visited.has(`${row},${col}`)\n    ) {\n      return;\n    }\n\n    visited.add(`${row},${col}`);\n    result.push(matrix[row][col]);\n\n    const directions = [\n      [0, 1],\n      [1, 0],\n      [0, -1],\n      [-1, 0],\n    ];\n    const nextDirectionIndex =\n      directionIndex  +1 >= directions.length ? 0 : directionIndex + 1;\n\n    dfs(\n      row + directions[directionIndex][0],\n      col + directions[directionIndex][1],\n      directionIndex\n    );\n    dfs(\n      row + directions[nextDirectionIndex][0],\n      col + directions[nextDirectionIndex][1],\n      nextDirectionIndex\n    );\n  }\n\n  dfs(0, 0, 0);\n\n  return result;\n}","compare_result":"11111111111111111111111","title_slug":"spiral-matrix","has_notes":true,"flag_type":1}