{"id":594365636,"lang":"javascript","lang_name":"JavaScript","time":"1Â year, 9Â months","timestamp":1638175860,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/594365636/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"/**\n * @param {number} capacity\n */\nvar LRUCache = function(capacity) {\n    this.obj = {};\n    this.counter = 0;\n    this.capacity = capacity;\n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function(key) {\n    if (this.obj[key] === undefined) return -1;\n    const [value, _] = this.obj[key];\n    this.obj[key][1] = ++this.counter;\n    return value;\n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function(key, value) {\n    if (Object.keys(this.obj).length === this.capacity) {\n        const [k, [val, count]] = Object.entries(this.obj).reduce((acc, curr) => {\n            return curr[1][1] < acc[1][1] ? curr : acc;    \n        });\n        delete this.obj[k];\n    }\n    this.obj[key] = [value, ++this.counter];\n};\n\n/** \n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */","compare_result":"1111111111011100100000","title_slug":"lru-cache","has_notes":false,"flag_type":1}