{"id":1037134375,"lang":"python3","lang_name":"Python3","time":"1 week, 4 days","timestamp":1693513646,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1037134375/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"class LRUCache:\n\n    def __init__(self, capacity: int):\n        self.clock = 0\n        self.capacity = capacity\n        self.cache = dict() # K: v\n        self.pq = [] # time[]\n\n    def get(self, key: int) -> int:\n        if key not in self.cache:\n            return -1\n        for i, (time, k) in enumerate(self.pq):\n            if k == key:\n                self.pq.pop(i)\n        heappush(self.pq, (self.clock, key))\n        self.clock += 1\n        return self.cache[key]\n\n    def put(self, key: int, value: int) -> None:\n        self.cache[key] = value\n        \n        for i, (time, k) in enumerate(self.pq):\n            if k == key:\n                self.pq.pop(i)\n        heappush(self.pq, (self.clock, key))\n        self.clock += 1\n\n        if len(self.cache) > self.capacity:\n            time, k = heappop(self.pq)\n            del self.cache[k]\n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)","compare_result":"1111111111111110100000","title_slug":"lru-cache","has_notes":false,"flag_type":1}