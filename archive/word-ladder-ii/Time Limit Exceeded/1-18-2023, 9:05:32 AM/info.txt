{"id":880672221,"lang":"python3","lang_name":"Python3","time":"7 months, 3 weeks","timestamp":1674061532,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/880672221/","is_pending":"Not Pending","title":"Word Ladder II","memory":"N/A","code":"class Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        words, output = set(wordList), []\n        if endWord not in words:\n            return []\n        min_dist = +math.inf\n        queue = deque([(0, beginWord, [beginWord])])\n        while queue:\n            dist, word, path = queue.popleft()\n            visited = set(path)\n            if word == endWord:\n                if dist < min_dist:\n                    min_dist = dist\n                    output = [path]\n                elif dist == min_dist:\n                    output.append(path)\n            for i in range(len(word)):\n                for k in range(26):\n                    s = word[:i] + chr(ord(\"a\") + k) + word[i+1:]\n                    if s not in visited and s in words \\\n                        and dist + 1 <= min_dist:\n                        queue.append((dist + 1, s, path + [s]))\n        return output","compare_result":"111111111111111111111000000000000000","title_slug":"word-ladder-ii","has_notes":false,"flag_type":1}