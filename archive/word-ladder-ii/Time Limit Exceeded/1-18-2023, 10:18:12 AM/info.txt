{"id":880719649,"lang":"python3","lang_name":"Python3","time":"7 months, 3 weeks","timestamp":1674065892,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/880719649/","is_pending":"Not Pending","title":"Word Ladder II","memory":"N/A","code":"class Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        words, output = set(wordList + [beginWord]), []\n        if endWord not in words:\n            return []\n        adj = defaultdict(list)\n        for word in words:\n            for i in range(len(word)):\n                pattern = word[:i] + '*' + word[i+1:]\n                adj[pattern].append(word)\n        dist = defaultdict(lambda: +math.inf)\n        dist[endWord] = 0\n        curr_dist = 0\n        min_dist = +math.inf\n\n        queue = deque([(endWord, [endWord])])\n        while queue:\n            curr_dist += 1\n            next_queue = deque()\n            while queue:\n                word, path = queue.popleft()\n                visited = set(path)\n                if word == beginWord:\n                    if curr_dist < dist[word]:\n                        output = [path[::-1]]\n                    elif curr_dist == dist[word]:\n                        output.append(path[::-1])\n                for i in range(len(word)):\n                    pattern = word[:i] + \"*\" + word[i+1:]\n                    for neighbor in adj[pattern]:\n                        if curr_dist + 1 <= dist[neighbor] and neighbor not in visited:\n                            dist[neighbor] = curr_dist + 1\n                            next_queue.append((neighbor, path + [neighbor]))\n            if output:\n                break\n            queue = next_queue\n        return output","compare_result":"111111111111111111111111111111110000","title_slug":"word-ladder-ii","has_notes":false,"flag_type":1}