{"id":880668660,"lang":"python3","lang_name":"Python3","time":"7 months, 3 weeks","timestamp":1674061193,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/880668660/","is_pending":"Not Pending","title":"Word Ladder II","memory":"N/A","code":"class Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        words, output = set(wordList), []\n        min_dist = +math.inf\n        pq = [(0, beginWord, [beginWord])]\n        while pq:\n            dist, word, path = heapq.heappop(pq)\n            if word == endWord:\n                if dist < min_dist:\n                    min_dist = dist\n                    output = [path]\n                elif dist == min_dist:\n                    output.append(path)\n            for i in range(len(word)):\n                for k in range(26):\n                    s = word[:i] + chr(ord(\"a\") + k) + word[i+1:]\n                    if s not in set(path) and s in words:\n                        heapq.heappush(pq, (dist + 1, s, path + [s]))\n        return output","compare_result":"111111111111111111100000000000000000","title_slug":"word-ladder-ii","has_notes":false,"flag_type":1}