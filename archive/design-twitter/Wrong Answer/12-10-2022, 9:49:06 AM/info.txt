{"id":857711752,"lang":"python3","lang_name":"Python3","time":"9Â months","timestamp":1670694546,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/857711752/","is_pending":"Not Pending","title":"Design Twitter","memory":"N/A","code":"class Tweet:\n    def __init__(self, tweetId, timestamp, nextPtr=None):\n        self.tweetId = tweetId\n        self.timestamp = timestamp\n        self.nextPtr = nextPtr\n\nclass User:\n    def __init__(self, userId, follows=set(), latestTweet=None):\n        self.userId = userId\n        self.follows = follows\n        if self.userId not in self.follows:\n            self.follows.add(self.userId)\n        self.latestTweet = latestTweet\n        self.ptr = self.latestTweet\n\n    def __lt__(self, other):\n        return self.ptr.timestamp > other.ptr.timestamp\n\n    def follow(self, followeeId):\n        self.follows.add(followeeId)\n\n    def unfollow(self, followeeId):\n        self.follows.remove(followeeId)\n\n    def postTweet(self, tweet):\n        if self.latestTweet:\n            tweet.nextPtr = self.latestTweet\n        self.latestTweet = tweet\n        self.ptr = self.latestTweet\n\n    def incPtr(self):\n        self.ptr = self.ptr.nextPtr\n\n    def resetPtr(self):\n        self.ptr = self.latestTweet\n\n    def isEmpty(self):\n        return self.latestTweet is None\n\nclass Twitter:\n    def __init__(self):\n        self.clock = 0\n        self.users = dict()\n\n    def postTweet(self, userId: int, tweetId: int) -> None:\n        newTweet = Tweet(tweetId, self.clock)\n        if userId not in self.users:\n            self.users[userId] = User(userId)\n        self.users[userId].postTweet(newTweet)\n        self.clock += 1\n\n    def getNewsFeed(self, userId: int) -> List[int]:\n        if userId not in self.users:\n            return []\n        pq = []\n        for followeeId in self.users[userId].follows:\n            if followeeId in self.users and not self.users[followeeId].isEmpty():\n                pq.append(self.users[followeeId])\n        heapq.heapify(pq)\n        feed = []\n        while pq and len(feed) < 10:\n            user = heapq.heappop(pq)\n            feed.append(user.ptr.tweetId)\n            user.incPtr()\n            if user.ptr:\n                heapq.heappush(pq, user)\n\n        for followeeId in self.users[userId].follows:\n            if followeeId in self.users:\n                self.users[followeeId].resetPtr()\n        return feed\n\n    def follow(self, followerId: int, followeeId: int) -> None:\n        if followerId not in self.users:\n            self.users[followerId] = User(followerId)\n        self.users[followerId].follow(followeeId)\n\n    def unfollow(self, followerId: int, followeeId: int) -> None:\n        self.users[followerId].unfollow(followeeId)\n        \n\n# Your Twitter object will be instantiated and called as such:\n# obj = Twitter()\n# obj.postTweet(userId,tweetId)\n# param_2 = obj.getNewsFeed(userId)\n# obj.follow(followerId,followeeId)\n# obj.unfollow(followerId,followeeId)","compare_result":"1111111111100001","title_slug":"design-twitter","has_notes":false,"flag_type":1}