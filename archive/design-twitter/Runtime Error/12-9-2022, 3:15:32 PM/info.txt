{"id":857329108,"lang":"python3","lang_name":"Python3","time":"9Â months","timestamp":1670627732,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/857329108/","is_pending":"Not Pending","title":"Design Twitter","memory":"N/A","code":"from collections import defaultdict, deque\n\nclass Twitter:\n\n    def __init__(self):\n        self.timestamp = 0\n        self.tweets = defaultdict(deque)\n        self.follows = defaultdict(set)\n\n    def postTweet(self, userId: int, tweetId: int) -> None:\n        self.tweets[userId].appendleft((self.timestamp, tweetId))\n        self.timestamp += 1\n\n    def getNewsFeed(self, userId: int) -> List[int]:\n        users = [userId] + list(self.follows[userId])\n        ptrs = [0] * len(users)\n        lens = [len(self.tweets[_id]) for _id in users]\n\n        pq = [(self.tweets[user][ptr], idx, user) for idx, (user, ptr) in enumerate(zip(users, ptrs)) if self.tweets[user]]\n        heapq.heapify(pq)\n\n        feed = deque()\n        while pq and len(feed) < 10:\n            (time, tweetId), idx, user = heapq.heappop(pq)\n            feed.appendleft(tweetId)\n            ptrs[idx] += 1\n            if ptrs[idx] >= lens[idx]:\n                continue\n            heapq.heappush(pq, self.tweets[user][ptrs[idx]])\n        return feed\n\n    def follow(self, followerId: int, followeeId: int) -> None:\n        self.follows[followerId].add(followeeId)\n\n    def unfollow(self, followerId: int, followeeId: int) -> None:\n        self.follows[followerId].remove(followeeId)\n        \n\n# Your Twitter object will be instantiated and called as such:\n# obj = Twitter()\n# obj.postTweet(userId,tweetId)\n# param_2 = obj.getNewsFeed(userId)\n# obj.follow(followerId,followeeId)\n# obj.unfollow(followerId,followeeId)","compare_result":"1111000000000000","title_slug":"design-twitter","has_notes":false,"flag_type":1}