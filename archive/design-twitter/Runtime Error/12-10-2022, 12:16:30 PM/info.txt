{"id":857765388,"lang":"java","lang_name":"Java","time":"9Â months","timestamp":1670703390,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/857765388/","is_pending":"Not Pending","title":"Design Twitter","memory":"N/A","code":"class Tweet {\n    public int tweetId;\n    public int timestamp;\n    public Tweet next;\n\n    public Tweet(int tweetId, int timestamp, Tweet next) {\n        this.tweetId = tweetId;\n        this.timestamp = timestamp;\n        this.next = next;\n    }\n}\n\nclass User {\n    private int userId;\n    public Set<Integer> following;\n    private Tweet latestTweet;\n    public Tweet ptr;\n\n    public User(int userId, HashSet<Integer> following, Tweet latestTweet) {\n        this.userId = userId;\n        this.following = following;\n        this.latestTweet = latestTweet;\n        this.ptr = this.latestTweet;\n    }\n\n    public void follow(int followeeId) {\n        this.following.add(followeeId);\n    }\n\n    public void unfollow(int followeeId) {\n        if (this.following.contains(followeeId)) this.following.remove(followeeId);\n    }\n\n    public void postTweet(Tweet tweet) {\n        if (this.latestTweet != null) tweet.next = this.latestTweet;\n        this.latestTweet = tweet;\n        this.ptr = this.latestTweet;\n    }\n\n    public void incPtr() {\n        this.ptr = this.ptr.next;\n    }\n\n    public void resetPtr() {\n        this.ptr = this.latestTweet;\n    }\n\n    public boolean isEmpty() {\n        return this.latestTweet == null;\n    }\n}\n\nclass UserComparator implements Comparator<User> {\n    public int compare(User u1, User u2) {\n        if (u1.ptr == null || u2.ptr == null) return 0;\n        return u2.ptr.timestamp - u1.ptr.timestamp;\n    }\n}\n\nclass Twitter {\n    private int clock;\n    private Map<Integer, User> users;\n\n    public Twitter() {\n        this.clock = 0;\n        this.users = new HashMap<>();\n    }\n    \n    public void postTweet(int userId, int tweetId) {\n        Tweet newTweet = new Tweet(tweetId, this.clock++, null);\n        this.users.putIfAbsent(userId, new User(userId, new HashSet<>(Arrays.asList(userId)), null));\n        this.users.get(userId).postTweet(newTweet);\n    }\n    \n    public List<Integer> getNewsFeed(int userId) {\n        if (!this.users.containsKey(userId)) return new ArrayList<>();\n        for (int followeeId : this.users.get(userId).following) {\n            this.users.get(followeeId).resetPtr();\n        }\n\n        Queue<User> pq = new PriorityQueue<User>(new UserComparator());\n        for (int followeeId : this.users.get(userId).following) {\n            if (this.users.containsKey(followeeId) && !this.users.get(followeeId).isEmpty()) {\n                pq.add(this.users.get(followeeId));\n            }\n        }\n\n        List<Integer> feed = new ArrayList<>();\n        while (!pq.isEmpty() && feed.size() < 10) {\n            User user = pq.poll();\n            feed.add(user.ptr.tweetId);\n            if (user.ptr.next != null) {\n                user.incPtr();\n                pq.add(user);\n            }\n        }\n\n        return feed;\n    }\n    \n    public void follow(int followerId, int followeeId) {\n        this.users.putIfAbsent(followerId, new User(followerId, new HashSet<>(Arrays.asList(followerId)), null));\n        this.users.get(followerId).follow(followeeId);\n    }\n    \n    public void unfollow(int followerId, int followeeId) {\n        this.users.get(followerId).unfollow(followeeId);\n    }\n}\n\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * Twitter obj = new Twitter();\n * obj.postTweet(userId,tweetId);\n * List<Integer> param_2 = obj.getNewsFeed(userId);\n * obj.follow(followerId,followeeId);\n * obj.unfollow(followerId,followeeId);\n */","compare_result":"1110000000000000","title_slug":"design-twitter","has_notes":false,"flag_type":1}