{"id":857805530,"lang":"python3","lang_name":"Python3","time":"9Â months","timestamp":1670712600,"status":10,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/857805530/","is_pending":"Not Pending","title":"Design Twitter","memory":"14.2 MB","code":"class Tweet:\n    def __init__(self, tweetId: int, timestamp: int, next_: 'Tweet' = None):\n        self.tweetId = tweetId\n        self.timestamp = timestamp\n        self.next_ = next_\n\n    def __lt__(self, other: 'Tweet') -> bool:\n        return self.timestamp > other.timestamp\n\nclass User:\n    def __init__(self, userId: int, following: set[int] = set(), latestTweet: Tweet | None = None):\n        self.userId = userId\n        self.following = set([*following, self.userId])\n        self.latestTweet = latestTweet\n\n    def follow(self, followeeId: int) -> None:\n        self.following.add(followeeId)\n\n    def unfollow(self, followeeId: int) -> None:\n        self.following.discard(followeeId)\n\n    def postTweet(self, tweet: Tweet) -> None:\n        if self.latestTweet:\n            tweet.next_ = self.latestTweet\n        self.latestTweet = tweet\n\n    def isEmpty(self) -> bool:\n        return self.latestTweet is None\n\nclass Twitter:\n    def __init__(self):\n        self.clock = 0\n        self.users = dict()\n\n    def postTweet(self, userId: int, tweetId: int) -> None:\n        newTweet = Tweet(tweetId, self.clock)\n        self.users[userId] = self.users.get(userId, User(userId))\n        self.users[userId].postTweet(newTweet)\n        self.clock += 1\n\n    def getNewsFeed(self, userId: int) -> List[int]:\n        if userId not in self.users:\n            return []\n\n        pq = [self.users[followeeId].latestTweet for followeeId in self.users[userId].following \\\n            if followeeId in self.users and not self.users[followeeId].isEmpty()]\n        heapq.heapify(pq)\n        feed = []\n        while pq and len(feed) < 10:\n            tweet = heapq.heappop(pq)\n            feed.append(tweet.tweetId)\n            if tweet.next_:\n                tweet = tweet.next_\n                heapq.heappush(pq, tweet)\n        return feed\n\n    def follow(self, followerId: int, followeeId: int) -> None:\n        self.users[followerId] = self.users.get(followerId, User(followerId))\n        self.users[followerId].follow(followeeId)\n\n    def unfollow(self, followerId: int, followeeId: int) -> None:\n        self.users[followerId].unfollow(followeeId)\n\n\n# Your Twitter object will be instantiated and called as such:\n# obj = Twitter()\n# obj.postTweet(userId,tweetId)\n# param_2 = obj.getNewsFeed(userId)\n# obj.follow(followerId,followeeId)\n# obj.unfollow(followerId,followeeId)","compare_result":"1111111111111111","title_slug":"design-twitter","has_notes":false,"flag_type":1}