{"id":727188868,"lang":"python3","lang_name":"Python3","time":"1Â year, 2Â months","timestamp":1655773280,"status":10,"status_display":"Accepted","runtime":"57 ms","url":"/submissions/detail/727188868/","is_pending":"Not Pending","title":"Combination Sum III","memory":"13.9 MB","code":"class Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n        output = []\n        def backtrack(remain, comb, next_start):\n            if remain == 0 and len(comb) == k:\n                output.append(comb)\n                return\n            elif remain < 0 or len(comb) >= k:\n                return\n            for i in range(next_start, 9):\n                comb.append(i + 1)\n                backtrack(remain - (i + 1), comb[::], i + 1)\n                comb.pop()\n        backtrack(n, [], 0)\n        return output","compare_result":"111111111111111111","title_slug":"combination-sum-iii","has_notes":false,"flag_type":1}