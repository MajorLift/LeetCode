{"id":890455852,"lang":"python3","lang_name":"Python3","time":"7 months, 1 week","timestamp":1675396240,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/890455852/","is_pending":"Not Pending","title":"Minimum Window Substring","memory":"N/A","code":"class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        if not t or not s or not set([*t]).issubset(set([*s])):\n            return \"\"\n\n        n = len(s)\n        min_len, min_idx = +math.inf, (-1, -1)\n        window, target = defaultdict(int), Counter(t)\n        print(target)\n        l = r = 0\n        while r < n:\n            while r < n and len(window) < len(target):\n                print(window)\n                if s[r] in target:\n                    window[s[r]] += 1\n                r += 1\n            \n            while len(window) == len(target):\n                print(window)\n                if r - l + 1 < min_len:\n                    min_len = r - l + 1\n                    min_idx = (l, r)\n                \n                if s[l] in target:\n                    window[s[l]] -= 1\n                    if window[s[l]] <= 0:\n                        del window[s[l]]\n                l += 1\n\n        if min_len < +math.inf:\n            i, j = min_idx\n            return s[i:j]\n        return \"\"\n","compare_result":"110111110011111111001100011110011011010011111000000100010000000111111101111111010111000101011111011001000001011010111000111110111000110100000000100001000110100011111111100010010011110000100101000000000000000000000000111001010000000010000001001000100000001110000001000","title_slug":"minimum-window-substring","has_notes":false,"flag_type":1}