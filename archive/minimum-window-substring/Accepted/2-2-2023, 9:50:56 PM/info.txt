{"id":890508275,"lang":"python3","lang_name":"Python3","time":"7 months, 1 week","timestamp":1675403456,"status":10,"status_display":"Accepted","runtime":"847 ms","url":"/submissions/detail/890508275/","is_pending":"Not Pending","title":"Minimum Window Substring","memory":"14.7 MB","code":"class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        if not t or not s:\n            return \"\"\n        min_len, min_idx = +math.inf, (-1, -1)\n        window, target = defaultdict(int), Counter(t)\n\n        def compare_dict(d1, d2):\n            if len(d1) == len(d2):\n                if d1 == d2: \n                    return 0\n                return -1 if any(d1[k] < d2[k] for k in d1) else +1\n            return -1 if len(d1) < len(d2) else +1\n\n        l = r = 0\n        while r < len(s):\n            while r < len(s) and compare_dict(window, target) < 0:\n                if s[r] in target:\n                    window[s[r]] += 1\n                r += 1\n            \n            while compare_dict(window, target) >= 0:\n                if r - l + 1 < min_len:\n                    min_len = r - l + 1\n                    min_idx = (l, r)\n                \n                if s[l] in target:\n                    window[s[l]] -= 1\n                l += 1\n\n        if min_len == +math.inf:\n            return \"\"\n        i, j = min_idx\n        return s[i:j]\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-window-substring","has_notes":false,"flag_type":1}