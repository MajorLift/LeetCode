{"id":890473367,"lang":"python3","lang_name":"Python3","time":"7 months, 1 week","timestamp":1675398760,"status":10,"status_display":"Accepted","runtime":"749 ms","url":"/submissions/detail/890473367/","is_pending":"Not Pending","title":"Minimum Window Substring","memory":"14.6 MB","code":"class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        min_len, min_idx = +math.inf, (-1, -1)\n\n        target_set = set([*t])\n        idx_map = {char: i for i, char in enumerate(list(target_set))}\n        target = [Counter(t)[char] for char in target_set]\n        window = [0] * len(target_set)\n\n        if not t or not s:\n            return \"\"\n\n        l = r = 0\n        while r < len(s):\n            while r < len(s) and any(window[i] < target[i] for i in range(len(target_set))):\n                if s[r] in target_set:\n                    window[idx_map[s[r]]] += 1\n                r += 1\n            \n            while all(window[i] >= target[i] for i in range(len(target_set))):\n                if r - l + 1 < min_len:\n                    min_len = r - l + 1\n                    min_idx = (l, r)\n                \n                if s[l] in target_set:\n                    window[idx_map[s[l]]] -= 1\n                l += 1\n\n        if min_len == +math.inf:\n            return \"\"\n        i, j = min_idx\n        return s[i:j]\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-window-substring","has_notes":false,"flag_type":1}