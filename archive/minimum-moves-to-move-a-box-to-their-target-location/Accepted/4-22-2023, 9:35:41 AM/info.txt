{"id":937974651,"lang":"python3","lang_name":"Python3","time":"4 months, 3 weeks","timestamp":1682181341,"status":10,"status_display":"Accepted","runtime":"899 ms","url":"/submissions/detail/937974651/","is_pending":"Not Pending","title":"Minimum Moves to Move a Box to Their Target Location","memory":"22 MB","code":"class Solution:\n    def minPushBox(self, grid: List[List[str]]) -> int:\n        self.grid, self.m, self.n = grid, len(grid), len(grid[0])\n        self.DIRECTIONS = ((0, 1), (1, 0), (0, -1), (-1, 0))\n        start_player, start_box, (self.xt, self.yt) = map(self.findCellType, ('S', 'B', 'T'))\n        pq = [(self.heuristic(*start_box), 0, start_box, start_player)]\n        visited = set()\n        while pq:\n            _, moves, box, player = heappop(pq)\n            if (box, player) in visited:\n                continue\n            visited.add((box, player))\n            if box == (self.xt, self.yt):\n                return moves\n            for d in self.DIRECTIONS:\n                next_player = tuple(map(sum, zip(player, d)))\n                if not self.valid(*next_player):\n                    continue\n                if next_player == box:\n                    next_box = tuple(map(sum, zip(box, d)))\n                    if not self.valid(*next_box):\n                        continue\n                    heappush(pq, (self.heuristic(*next_box) + moves + 1, moves + 1, next_box, next_player))\n                else:\n                    heappush(pq, (self.heuristic(*box) + moves, moves, box, next_player))\n        return -1\n    \n    def heuristic(self, x, y):\n        return abs(self.xt - x) + abs(self.yt - y)\n    \n    def valid(self, x, y):\n        return 0 <= x < self.m and 0 <= y < self.n \\\n            and self.grid[x][y] != '#'\n        \n    def findCellType(self, cell_type):\n        for i, j in product(range(self.m), range(self.n)):\n            if self.grid[i][j] == cell_type:\n                return (i, j)\n","compare_result":"111111111111111111111111111111","title_slug":"minimum-moves-to-move-a-box-to-their-target-location","has_notes":true,"flag_type":1}