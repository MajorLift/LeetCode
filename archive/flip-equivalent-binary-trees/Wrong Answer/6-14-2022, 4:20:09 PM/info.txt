{"id":722431367,"lang":"python3","lang_name":"Python3","time":"1 year, 2 months","timestamp":1655248809,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/722431367/","is_pending":"Not Pending","title":"Flip Equivalent Binary Trees","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def flipEquiv(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:\n        if not root1 or not root2:\n            return root1 == root2\n        return (self.flipEquiv(root1.left, root2.left) and self.flipEquiv(root1.right, root2.right)) or (self.flipEquiv(root1.left, root2.right) and self.flipEquiv(root1.right, root2.left))","compare_result":"11111110110111110111111011111111111111111111111111111111111110111111111111111","title_slug":"flip-equivalent-binary-trees","has_notes":false,"flag_type":1}