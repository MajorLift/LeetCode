{"id":847914189,"lang":"python3","lang_name":"Python3","time":"9 months, 3 weeks","timestamp":1669104122,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/847914189/","is_pending":"Not Pending","title":"Parallel Courses III","memory":"N/A","code":"from collections import deque\n\nclass Solution:\n    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -> int:\n        adj = [[] for _ in range(n)]\n        indegrees = [0 for _ in range(n)]\n        for src, dst in relations:\n            adj[src - 1].append(dst - 1)\n            indegrees[dst - 1] += 1\n        completed = set()\n        queue = deque([node for node in range(n) if indegrees[node] == 0])\n        ans = 0\n        while queue:\n            ans += 1\n            for curr in list(queue):\n                queue.popleft()\n                time[curr] -= 1\n                if time[curr] > 0:\n                    queue.append(curr)\n                else:\n                    completed.add(curr)\n                    for node in adj[curr]:\n                        if node not in completed:\n                            indegrees[node] -= 1\n                            if indegrees[node] == 0:\n                                queue.append(node)\n        return ans","compare_result":"111111111111111111100000000000000000000000","title_slug":"parallel-courses-iii","has_notes":false,"flag_type":1}