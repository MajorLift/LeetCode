{"id":942901037,"lang":"python3","lang_name":"Python3","time":"4 months, 1 week","timestamp":1682984168,"status":10,"status_display":"Accepted","runtime":"1863 ms","url":"/submissions/detail/942901037/","is_pending":"Not Pending","title":"Parallel Courses III","memory":"140.9 MB","code":"class Solution:\n    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -> int:\n        time = [0] + time\n        adj, indegree = [[] for _ in range(n + 1)], [-1] + [0] * n\n        for u, v in relations:\n            adj[u].append(v)\n            indegree[v] += 1\n        \n        @cache\n        def dfs(node):\n            if not node: return 0\n            return time[node] + max(dfs(nxt) for nxt in adj[node] or [0])\n        return max(map(dfs, [i for i,e in enumerate(indegree) if e == 0]))            ","compare_result":"111111111111111111111111111111111111111111","title_slug":"parallel-courses-iii","has_notes":false,"flag_type":1}