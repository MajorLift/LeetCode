{"id":938106736,"lang":"python3","lang_name":"Python3","time":"4 months, 3 weeks","timestamp":1682204186,"status":10,"status_display":"Accepted","runtime":"1593 ms","url":"/submissions/detail/938106736/","is_pending":"Not Pending","title":"Parallel Courses III","memory":"43.3 MB","code":"class Solution:\n    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -> int:\n        time = [0] + time\n        adj = [[] for _ in range(n + 1)]\n        indegree = [-1] + [0] * n\n        for u, v in relations:\n            adj[u].append(v)\n            indegree[v] += 1\n\n        dist = [0] * (n + 1)    # single src: null head\n        queue = deque()\n        for i in range(1, n + 1):\n            if indegree[i] == 0:\n                # edge weight from 'null head' to zero indegree nodes\n                dist[i] = time[i]\n                queue.append(i)\n        while queue:\n            u = queue.popleft()\n            for v in adj[u]:\n                dist[v] = max(dist[v], dist[u] + time[v])\n                indegree[v] -= 1\n                if indegree[v] == 0:\n                    queue.append(v)\n        return max(dist)\n","compare_result":"111111111111111111111111111111111111111111","title_slug":"parallel-courses-iii","has_notes":true,"flag_type":1}