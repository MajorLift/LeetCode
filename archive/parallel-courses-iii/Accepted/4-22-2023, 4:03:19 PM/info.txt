{"id":938108079,"lang":"python3","lang_name":"Python3","time":"4 months, 3 weeks","timestamp":1682204599,"status":10,"status_display":"Accepted","runtime":"1775 ms","url":"/submissions/detail/938108079/","is_pending":"Not Pending","title":"Parallel Courses III","memory":"136.9 MB","code":"class Solution:\n    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -> int:\n        time = [0] + time\n        adj = [[] for _ in range(n + 1)]\n        indegree = [-1] + [0] * n\n        for u, v in relations:\n            adj[u].append(v)\n            indegree[v] += 1\n\n        @cache\n        def dp(node):\n            return time[node] + max([dp(child) for child in adj[node]] or [0])\n\n        return max([dp(node) for node in range(1, n + 1) if indegree[node] == 0])\n","compare_result":"111111111111111111111111111111111111111111","title_slug":"parallel-courses-iii","has_notes":true,"flag_type":1}