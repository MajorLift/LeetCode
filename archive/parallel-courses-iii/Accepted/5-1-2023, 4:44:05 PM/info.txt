{"id":942902855,"lang":"python3","lang_name":"Python3","time":"4 months, 1 week","timestamp":1682984645,"status":10,"status_display":"Accepted","runtime":"1599 ms","url":"/submissions/detail/942902855/","is_pending":"Not Pending","title":"Parallel Courses III","memory":"45.7 MB","code":"class Solution:\n    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -> int:\n        time = [0] + time\n        adj, indegree = [[] for _ in range(n + 1)], [-1] + [0] * n\n        for u, v in relations:\n            adj[u].append(v)\n            indegree[v] += 1\n        \n        dist = time[:]\n        queue = deque([i for i,e in enumerate(indegree) if e == 0])\n        while queue:\n            curr = queue.popleft()\n            for nxt in adj[curr]:\n                dist[nxt] = max(dist[nxt], dist[curr] + time[nxt])\n                indegree[nxt] -= 1\n                if indegree[nxt] == 0:\n                    queue.append(nxt)\n        return max(dist)","compare_result":"111111111111111111111111111111111111111111","title_slug":"parallel-courses-iii","has_notes":false,"flag_type":1}