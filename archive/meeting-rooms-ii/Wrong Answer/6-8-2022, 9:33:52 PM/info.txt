{"id":717820184,"lang":"python3","lang_name":"Python3","time":"1Â year, 3Â months","timestamp":1654749232,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/717820184/","is_pending":"Not Pending","title":"Meeting Rooms II","memory":"N/A","code":"class Solution:\n    def minMeetingRooms(self, intervals: List[List[int]]) -> int:\n        intervals = sorted(intervals, key=lambda x: x[0])\n        print(intervals)\n        counter = 1\n        # min_heap of ending times only\n        end_times = [intervals[0][1]]\n        # print(end_times)\n        \n        # iterate over intervals list and compare start_time to top of min_heap\n        for [start, end] in intervals[1:]:\n            # if start_time is geq than top than no need for new room\n            # else need new room increment counter\n            if start < end_times[0]:\n                counter += 1\n            # poppush the corresponding end_time of curr interval into min_heap\n            heapq.heappushpop(end_times, end)\n            # print(end_times)\n            \n        return counter","compare_result":"011111111111101011111110101101101101010100010100000011100110001000000110000010","title_slug":"meeting-rooms-ii","has_notes":false,"flag_type":1}