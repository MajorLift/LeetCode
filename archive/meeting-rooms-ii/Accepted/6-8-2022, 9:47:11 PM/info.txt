{"id":717828784,"lang":"python3","lang_name":"Python3","time":"1 year, 3 months","timestamp":1654750031,"status":10,"status_display":"Accepted","runtime":"132 ms","url":"/submissions/detail/717828784/","is_pending":"Not Pending","title":"Meeting Rooms II","memory":"17.5 MB","code":"class Solution:\n    def minMeetingRooms(self, intervals: List[List[int]]) -> int:\n        if len(intervals) == 0:\n            return 0\n    \n        intervals = sorted(intervals, key=lambda x: x[0])\n        # print(intervals)\n        \n        # min_heap of ending times only\n        end_times = [intervals[0][1]]\n        counter = 1\n        \n        # iterate over intervals list and compare start_time to top of min_heap\n        for [start, end] in intervals[1:]:\n            # if start_time is earlier than top, need new room \n            # increment counter and push end_time of curr meeting into min_heap\n            # without! popping min_heap since top meeting is still ongoing\n            if start < end_times[0]:\n                counter += 1\n                heapq.heappush(end_times, end)\n            # else, no need for new room, pop min_heap, push end_time of curr meeting\n            else:\n                heapq.heapreplace(end_times, end)\n            # print(end_times)\n            \n        return counter","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"meeting-rooms-ii","has_notes":false,"flag_type":1}