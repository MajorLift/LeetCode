{"id":714775930,"lang":"python3","lang_name":"Python3","time":"1 year, 3 months","timestamp":1654411414,"status":10,"status_display":"Accepted","runtime":"169 ms","url":"/submissions/detail/714775930/","is_pending":"Not Pending","title":"Meeting Rooms II","memory":"17.6 MB","code":"class Solution:\n    def minMeetingRooms(self, intervals: List[List[int]]) -> int:\n        if not intervals:\n            return 0\n        \n        free_rooms = []\n        intervals.sort(key = lambda x: x[0])\n        \n        heapq.heappush(free_rooms, intervals[0][1])\n        for [start, end] in intervals[1:]:\n            if free_rooms[0] <= start:\n                heapq.heappop(free_rooms)\n            heapq.heappush(free_rooms, end)\n        \n        return len(free_rooms)","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"meeting-rooms-ii","has_notes":false,"flag_type":1}