{"id":712533034,"lang":"python3","lang_name":"Python3","time":"1Â year, 3Â months","timestamp":1654144810,"status":10,"status_display":"Accepted","runtime":"45 ms","url":"/submissions/detail/712533034/","is_pending":"Not Pending","title":"Permutations","memory":"14.1 MB","code":"class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        n = len(nums)\n        output = []\n        def backtrack(first):\n            if first == n:\n                output.append(nums[:])\n            for i in range(first, n):\n                nums[first], nums[i] = nums[i], nums[first]\n                backtrack(first + 1)\n                nums[first], nums[i] = nums[i], nums[first]\n        backtrack(0)\n        return output","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1}