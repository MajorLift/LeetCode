{"id":736215798,"lang":"python3","lang_name":"Python3","time":"1 year, 2 months","timestamp":1656721445,"status":10,"status_display":"Accepted","runtime":"46 ms","url":"/submissions/detail/736215798/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"14 MB","code":"class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        dictionary = {k: [chr(3 * (k - 2) + i + ord(\"a\")) for i in range(3)] for k in range(2, 7)}\n        dictionary[7] = ['p', 'q', 'r', 's']\n        dictionary[8] = ['t', 'u', 'v']\n        dictionary[9] = ['w', 'x', 'y', 'z']\n        # print(dictionary)\n\n        output = []\n        def backtrack(prev, currDigitIdx):\n            if len(prev) == len(digits):\n                output.append(\"\".join(prev))\n                return\n            for letter in dictionary[int(digits[currDigitIdx])]:\n                prev.append(letter)\n                backtrack(prev, currDigitIdx + 1)\n                prev.pop()\n    \n        backtrack([], 0)            \n        return output","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number","has_notes":false,"flag_type":1}