{"id":866041019,"lang":"python3","lang_name":"Python3","time":"8 months, 2 weeks","timestamp":1672099889,"status":10,"status_display":"Accepted","runtime":"30 ms","url":"/submissions/detail/866041019/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"14 MB","code":"class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        n = len(digits)\n        if n == 0:\n            return []\n        \n        charmap = {k: [chr(ord('a') + 3 * (k - 2) + i) for i in range(3)] for k in range(2, 7)}\n        charmap[7] = [chr(ord('p') + i) for i in range(4)]\n        charmap[8] = [chr(ord('p') + 4 + i) for i in range(3)]\n        charmap[9] = [chr(ord('p') + 7 + i) for i in range(4)]\n\n        output = []\n        def backtrack(path = [], idx = 0):\n            if idx == n:\n                output.append(''.join(path))\n                return\n            for char in charmap[int(digits[idx])]:\n                path.append(char)\n                backtrack(path, idx + 1)\n                path.pop()\n        backtrack()\n        return output\n","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number","has_notes":false,"flag_type":1}