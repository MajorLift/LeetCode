{"id":968443610,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1686447707,"status":10,"status_display":"Accepted","runtime":"590 ms","url":"/submissions/detail/968443610/","is_pending":"Not Pending","title":"Minimum Interval to Include Each Query","memory":"114 MB","code":"class Solution {\npublic:\n    vector<int> minInterval(vector<vector<int>>& intervals, vector<int>& queries) {\n        int n = intervals.size(), m = queries.size();\n        vector<int> output(m, -1);\n\n        vector<pair<int, int>> query_enum(m);\n        for (int i = 0; i < m; ++i) {\n            query_enum.push_back(make_pair(queries[i], i));\n        }\n        sort(intervals.begin(), intervals.end());\n        sort(query_enum.begin(), query_enum.end());\n\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;\n        int idx = 0;\n        for (auto &[query, query_idx] : query_enum) {\n            for (; idx < n && intervals[idx][0] <= query; ++idx) {\n                pq.push({intervals[idx][1] - intervals[idx][0] + 1, idx});\n            }\n            while (!pq.empty() && intervals[pq.top().second][1] < query) pq.pop();\n            output[query_idx] = pq.empty() ? -1 : pq.top().first;\n        }\n        return output;\n    }\n};","compare_result":"111111111111111111111111111111111111111111","title_slug":"minimum-interval-to-include-each-query","has_notes":true,"flag_type":1}