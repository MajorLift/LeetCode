{"id":969173903,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1686521819,"status":10,"status_display":"Accepted","runtime":"719 ms","url":"/submissions/detail/969173903/","is_pending":"Not Pending","title":"Minimum Interval to Include Each Query","memory":"150.1 MB","code":"class Solution {\npublic:\n    vector<int> minInterval(vector<vector<int>>& intervals, vector<int>& queries) {\n        int n = intervals.size(), m = queries.size();\n        vector<int> output(m, -1);\n        \n        enum { Start, Query, End };\n        vector<tuple<int, int, int>> events;\n        for (int i = 0; i < n; ++i) {\n            events.push_back(make_tuple(intervals[i][0], Start, i));\n            events.push_back(make_tuple(intervals[i][1], End, i));\n        }\n        for (int i = 0; i < m; ++i) {\n            events.push_back(make_tuple(queries[i], Query, i));\n        }\n        sort(events.begin(), events.end());\n        \n        multiset<int> sweep_line;\n        for (auto &[pos, type, idx] : events) {\n            if (type == Query) {\n                output[idx] = !sweep_line.empty() ? *sweep_line.begin() : -1;\n                continue;\n            }\n            \n            int gap = intervals[idx][1] - intervals[idx][0] + 1;\n            if (type == Start) {\n                sweep_line.emplace(gap);\n            } else {\n                auto it = sweep_line.lower_bound(gap);\n                sweep_line.erase(it);\n            }\n        }\n        return output;\n    }\n};","compare_result":"111111111111111111111111111111111111111111","title_slug":"minimum-interval-to-include-each-query","has_notes":true,"flag_type":1}