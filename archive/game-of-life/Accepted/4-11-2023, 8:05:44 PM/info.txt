{"id":932245826,"lang":"python3","lang_name":"Python3","time":"5Â months","timestamp":1681268744,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/932245826/","is_pending":"Not Pending","title":"Game of Life","memory":"14 MB","code":"class Solution:\n    def gameOfLife(self, board: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        m, n = len(board), len(board[0])\n        DIRECTIONS = set(product((1, 0, -1), (1, 0, -1))) - set([(0, 0)])\n        for i, j in product(range(m), range(n)):\n            live_neighbors = 0\n            for direction in DIRECTIONS:\n                x, y = map(sum, zip((i, j), direction))\n                if 0 <= x < m and 0 <= y < n:\n                    live_neighbors += board[x][y] & 1\n\n            if board[i][j] == 1 and 2 <= live_neighbors <= 3 \\\n                or board[i][j] == 0 and live_neighbors == 3:\n                board[i][j] |= 1 << 1\n\n        for i, j in product(range(m), range(n)):\n            board[i][j] >>= 1","compare_result":"1111111111111111111111","title_slug":"game-of-life","has_notes":true,"flag_type":1}