{"id":932242085,"lang":"python3","lang_name":"Python3","time":"5Â months","timestamp":1681268114,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/932242085/","is_pending":"Not Pending","title":"Game of Life","memory":"N/A","code":"class Solution:\n    def gameOfLife(self, board: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        m, n = len(board), len(board[0])\n        prev = deepcopy(board)\n        DIRECTIONS = set(product((1, 0, -1), (1, 0, -1))) - set([(0, 0)])\n        for i, j in product(range(m), range(n)):\n            for direction in DIRECTIONS:\n                x, y = map(sum, zip((i, j), direction))\n                if 0 <= x < m and 0 <= y < n and prev[x][y] == 1:\n                    live_neighbors += 1\n            board[i][j] = 0 if prev[i][j] == 1 and not 2 <= live_neighbors <= 3 \\\n                else 1 if prev[i][j] == 0 and live_neighbors == 3 \\\n                else board[i][j]\n","compare_result":"0000000000000000000000","title_slug":"game-of-life","has_notes":false,"flag_type":1}