{"id":301310990,"lang":"c","lang_name":"C","time":"3 years, 7 months","timestamp":1581165903,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/301310990/","is_pending":"Not Pending","title":"Pascal's Triangle II","memory":"N/A","code":"\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\n\n// f(5, 3) = f(4, 2) + f(4, 3) = f(3, 1) + f(3, 2) + f(3, 2) + f(3, 3)\n//          = 1 + f(2, 1) + f(2, 2) + f(2, 1) + f(2, 2) + 1\n//          = 6\n\nint recursivePascalCell(int i, int j){\n    if(i == 0 || j == 0 || j == i){\n        return 1;\n    }\n    int p = 0;\n    p += recursivePascalCell(i-1, j-1) + recursivePascalCell(i-1, j);\n    return p;\n}\n\nint* getRow(int rowIndex, int* returnSize){\n    *returnSize = rowIndex + 1;\n    int* q = (int*) malloc(*returnSize * sizeof(int));\n    q[0] = 1;\n    q[rowIndex] = 1;\n    \n    int j = 1;\n    while(j < rowIndex){\n        q[j] = recursivePascalCell(rowIndex, j);\n        j += 1;\n    }\n    return q;\n}\n\n","compare_result":"1111111111111111111111111111100000","title_slug":"pascals-triangle-ii","has_notes":false,"flag_type":1}