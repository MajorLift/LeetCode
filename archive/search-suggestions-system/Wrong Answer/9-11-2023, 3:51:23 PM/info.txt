{"id":1046948784,"lang":"python3","lang_name":"Python3","time":"18 hours, 3 minutes","timestamp":1694472683,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1046948784/","is_pending":"Not Pending","title":"Search Suggestions System","memory":"N/A","code":"class Solution:\n    def suggestedProducts(self, products: List[str], searchWord: str) -> List[List[str]]:\n        trie = Trie()\n        for product in products:\n            trie.add_word(product)\n        \n        output, curr = [[] for _ in range(len(searchWord))], trie.root\n        for i, char in enumerate(searchWord):\n            curr = curr.get_child(char)\n            if not curr: break\n            output[i] = sorted(curr.get_descendants())[:3]\n        return output\n            \nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def __repr__(self):\n        return str([e for e in self.root.children if e])\n\n    def add_word(self, word):\n        curr = self.root\n        for i, char in enumerate(word):\n            if not curr: break\n            curr = curr.add_child(char, i == len(word) - 1)\n\n    @staticmethod\n    def char_idx(char):\n        return ord(char) - ord('a')\n\nclass TrieNode:\n    def __init__(self, val=None, prefix='', isEnd=None, children=None):\n        self.val = val\n        self.prefix = prefix\n        self.isEnd = isEnd or False\n        self.children = children or [None] * 26\n\n    def __repr__(self):\n        return f'val: {self.val}, prefix: {self.prefix}, isEnd: {self.isEnd}, children: {str([e for e in self.children if e])}'\n\n    def get_child(self, val):\n        return self.children[Trie.char_idx(val)]\n\n    def has_child(self, val):\n        return self.children[Trie.char_idx(val)] is not None\n\n    def add_child(self, val, isEnd):\n        if not self.has_child(val):\n            self.children[Trie.char_idx(val)] = TrieNode(val, self.prefix + val, isEnd)\n        return self.get_child(val)\n\n    def get_descendants(self):\n        output, stack = [], [self]\n        while stack:\n            curr = stack.pop()\n            if curr.isEnd:\n                output.append(curr.prefix)\n            for child in curr.children:\n                if not child: continue\n                stack.append(child)\n        return output\n","compare_result":"1111111111001011100010100001000100000001111","title_slug":"search-suggestions-system","has_notes":false,"flag_type":1}