{"id":866231397,"lang":"python3","lang_name":"Python3","time":"8 months, 2 weeks","timestamp":1672129053,"status":10,"status_display":"Accepted","runtime":"447 ms","url":"/submissions/detail/866231397/","is_pending":"Not Pending","title":"N-Queens II","memory":"13.8 MB","code":"class Solution:\n    def totalNQueens(self, n: int) -> int:\n        init = [[True for _ in range(n)] for _ in range(n)]\n        output = 0\n        def backtrack(row, col, valids):\n            nonlocal output\n            if row == n - 1:\n                output += 1\n                return\n            \n            for i in range(n):\n                valids[row][i] = False  # row\n                valids[i][col] = False  # col\n                if row + i < n:\n                    if col + i < n:\n                        valids[row + i][col + i] = False    # diag\n                    if col - i >= 0:\n                        valids[row + i][col - i] = False    # anti-diag\n\n            for i in range(n):\n                if valids[row + 1][i]:\n                    backtrack(row + 1, i, copy.deepcopy(valids))\n\n        for i in range(n):\n            backtrack(0, i, copy.deepcopy(init))\n        return output","compare_result":"111111111","title_slug":"n-queens-ii","has_notes":false,"flag_type":1}