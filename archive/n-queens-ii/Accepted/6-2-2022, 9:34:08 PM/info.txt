{"id":713275569,"lang":"python3","lang_name":"Python3","time":"1 year, 3 months","timestamp":1654230848,"status":10,"status_display":"Accepted","runtime":"665 ms","url":"/submissions/detail/713275569/","is_pending":"Not Pending","title":"N-Queens II","memory":"13.9 MB","code":"class Solution:\n    def totalNQueens(self, n: int) -> int:\n        self.output = 0\n        \n        def backtrack(curr = (0, 0), \n                      queen_count = 0, \n                      search_space = [(i, j) for i in range(n) for j in range(n)]):\n            \n            Qrow, Qcol = curr\n            \n            if queen_count == n:\n                self.output += 1\n                \n            valid_squares = []\n            for i, j in search_space:\n                if i != Qrow and j != Qcol and abs((i - Qrow) / (j - Qcol)) != 1:\n                    valid_squares.append((i, j))\n\n            while(len(valid_squares)):\n                backtrack(valid_squares.pop(), queen_count + 1, valid_squares)\n        \n        for x in range(n):\n            backtrack((x, 0), 1)\n\n        return self.output","compare_result":"111111111","title_slug":"n-queens-ii","has_notes":false,"flag_type":1}