{"id":920449567,"lang":"python3","lang_name":"Python3","time":"5Â months, 3Â weeks","timestamp":1679536933,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/920449567/","is_pending":"Not Pending","title":"Partition Labels","memory":"N/A","code":"class Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        n = len(s)\n        charmap = defaultdict(list)\n        for i, char in enumerate(s):\n            if len(charmap[char]) < 2:\n                charmap[char].append(i)\n            else:\n                charmap[char][1] = i\n        charmap = {k: v for k, v in charmap.items() if len(v) > 1}\n\n        output = [[]]\n        for i, char in enumerate(s):\n            if not output[-1]:\n                output[-1].append(i)\n                if char not in charmap and i < n - 1:\n                    output[-1].append(i + 1)\n                    output.append([])\n                else:\n                    output[-1].append(charmap[char][1] + 1)\n            else:\n                if i == output[-1][1] - 1 and i < n - 1:\n                    output.append([])\n                elif char in charmap:\n                    output[-1][1] = max(output[-1][1], charmap[char][1] + 1)\n        return [e[1] - e[0] for e in output]\n\n            ","compare_result":"1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"partition-labels","has_notes":false,"flag_type":1}