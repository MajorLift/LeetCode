{"id":816142004,"lang":"python3","lang_name":"Python3","time":"11 months, 1 week","timestamp":1665020429,"status":10,"status_display":"Accepted","runtime":"70 ms","url":"/submissions/detail/816142004/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"17.6 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n        if not head:\n            return False\n        slow, fast = head, head.next\n        while True:\n            if not fast or not fast.next:\n                return False\n            if slow == fast:\n                break\n            slow = slow.next\n            fast = fast.next.next\n        return True","compare_result":"1111111111111111111111","title_slug":"linked-list-cycle","has_notes":false,"flag_type":1}