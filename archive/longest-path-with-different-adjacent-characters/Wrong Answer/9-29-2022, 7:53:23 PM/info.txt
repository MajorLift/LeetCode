{"id":811780440,"lang":"python3","lang_name":"Python3","time":"11 months, 2 weeks","timestamp":1664506403,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/811780440/","is_pending":"Not Pending","title":"Longest Path With Different Adjacent Characters","memory":"N/A","code":"class Solution:\n    def longestPath(self, parent: List[int], s: str) -> int:\n        n = len(parent)\n        children = [[] for _ in range(n)]\n        for child, node in enumerate(parent[1:]):\n            children[node].append(child)\n        print(children)\n\n        # ans = 1\n        # def dfs(k):\n        #     nonlocal ans\n        #     if len(children[k]) == 0:\n        #         return 1\n        #     first, second = 0, 0\n        #     for child in children[k]:\n        #         curr = dfs(child)\n        #         if s[child] != s[k]:\n        #             if second < curr <= first:\n        #                 second = curr\n        #             elif curr > first:\n        #                 first, second = curr, first\n        #     ans = max(ans, first + second + 1)\n        #     return first + 1\n        # dfs(0)\n        # return ans","compare_result":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"longest-path-with-different-adjacent-characters","has_notes":false,"flag_type":1}