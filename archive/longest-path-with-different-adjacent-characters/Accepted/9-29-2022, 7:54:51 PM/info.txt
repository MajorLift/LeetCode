{"id":811781134,"lang":"python3","lang_name":"Python3","time":"11 months, 2 weeks","timestamp":1664506491,"status":10,"status_display":"Accepted","runtime":"4323 ms","url":"/submissions/detail/811781134/","is_pending":"Not Pending","title":"Longest Path With Different Adjacent Characters","memory":"143.1 MB","code":"class Solution:\n    def longestPath(self, parent: List[int], s: str) -> int:\n        n = len(parent)\n        children = [[] for _ in range(n)]\n        for child, node in enumerate(parent):\n            if node >= 0:\n                children[node].append(child)\n        # print(children)\n\n        ans = 1\n        def dfs(k):\n            nonlocal ans\n            first, second = 0, 0\n            for child in children[k]:\n                curr = dfs(child)\n                if s[child] != s[k]:\n                    if second < curr <= first:\n                        second = curr\n                    elif curr > first:\n                        first, second = curr, first\n            ans = max(ans, first + second + 1)\n            return first + 1\n        dfs(0)\n        return ans","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-path-with-different-adjacent-characters","has_notes":false,"flag_type":1}