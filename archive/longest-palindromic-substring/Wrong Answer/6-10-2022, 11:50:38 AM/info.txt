{"id":719089237,"lang":"python3","lang_name":"Python3","time":"1 year, 3 months","timestamp":1654887038,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/719089237/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"N/A","code":"class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        memo = [0] * len(s)\n        for i in range(len(s) - 1):\n            if s[i + 1] == s[i]:\n                memo[i] = 1\n            elif i > 0 and s[i - 1] == s [i + 1]:\n                memo[i] = 2\n        \n        max_len = -float('inf')\n        output = \"\"\n        for i in range(len(memo)):\n            curr_len = 0\n            left, right = -1, len(s)\n            k = 0\n            \n            if memo[i] == 1:\n                curr_len = 2\n                while i - k >= 0 and i + 1 + k < len(s):\n                    left, right = i - k, i + 1 + k\n                    if s[left] == s[right]:\n                        k += 1\n                        curr_len += 2\n                    else:\n                        break\n            elif memo[i] == 2:\n                curr_len = 3\n                while i - 1 - k >= 0 and i + 1 + k < len(s):\n                    left, right = i - 1 - k, i + 1 + k\n                    if s[left] == s[right]:\n                        k += 1\n                        curr_len += 2\n                    else:\n                        break\n            if curr_len > max_len:\n                max_len = curr_len\n                output = s[left:right + 1]\n                \n        return output","compare_result":"101110111111010101110011011111110110011110101000000000000000000000000000000000000000000000001111111111111111111111111111000010101010101010101010101010101010110101011010101010111110","title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1}