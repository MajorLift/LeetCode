{"id":935477238,"lang":"python3","lang_name":"Python3","time":"4 months, 3 weeks","timestamp":1681770133,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/935477238/","is_pending":"Not Pending","title":"Find Leaves of Binary Tree","memory":"13.9 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findLeaves(self, root: Optional[TreeNode]) -> List[List[int]]:\n        self.head = TreeNode(None, root)\n        output = []\n        while not self.isRootNull():\n            output.append(self.dfs(root))\n        return output\n\n    def nullRoot(self):\n        self.head.left = None\n\n    def isRootNull(self):\n        return self.head.left is None\n\n    def dfs(self, root):\n        if not root:\n            return []\n        if self.isLeaf(root):\n            self.nullRoot()\n            return [root.val]\n        leftChild, rightChild = root.left, root.right\n        if self.isLeaf(leftChild):\n            root.left = None\n        if self.isLeaf(rightChild):\n            root.right = None\n        return ([leftChild.val] \n                if self.isLeaf(leftChild)\n                else self.dfs(leftChild)) \\\n            + ([rightChild.val] \n                if self.isLeaf(rightChild)\n                else self.dfs(rightChild))\n    \n    def isLeaf(self, node):\n        return node and not node.left and not node.right\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-leaves-of-binary-tree","has_notes":false,"flag_type":1}