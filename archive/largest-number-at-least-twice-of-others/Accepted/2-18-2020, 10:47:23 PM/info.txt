{"id":304769657,"lang":"c","lang_name":"C","time":"3 years, 6 months","timestamp":1582094843,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/304769657/","is_pending":"Not Pending","title":"Largest Number At Least Twice of Others","memory":"6.8 MB","code":"int* slicecopy(int* nums, int i, int j){\n    int* ret = (int*) malloc(sizeof(int) * (j - i));\n    int m = 0;\n    int n = i;\n    while(m < j - i){\n        ret[m++] = nums[n++];\n    }\n    return ret;\n}\n\nint findmaxidx(int* nums, int numsSize){\n    int curr = nums[0];\n    int idx = 0;\n    for(int i = 0; i < numsSize; i++){\n        if(nums[i] > curr){\n            curr = nums[i];\n            idx = i;\n        }\n    }\n    return idx;\n}\n\nint dominantIndex(int* nums, int numsSize){\n    int maxidx = findmaxidx(nums, numsSize);\n    int maxval = nums[maxidx];\n    int* twicenums = (int*) malloc(sizeof(int) * (numsSize - 1));\n    int i = 0;\n    while(i < numsSize){\n        if(i != maxidx){\n            if(2 * nums[i] > maxval) return -1;\n        }\n        i++;\n    }\n    return maxidx;\n}\n\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-number-at-least-twice-of-others","has_notes":false,"flag_type":1}