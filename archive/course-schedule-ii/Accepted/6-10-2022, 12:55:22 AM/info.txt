{"id":718741152,"lang":"python3","lang_name":"Python3","time":"1 year, 3 months","timestamp":1654847722,"status":10,"status_display":"Accepted","runtime":"204 ms","url":"/submissions/detail/718741152/","is_pending":"Not Pending","title":"Course Schedule II","memory":"15.3 MB","code":"# [[1,0],[2,0],[3,1],[3,2]]\n# adj_next: [[1, 2], [3], [3], []]\n# adj_pre: [[], [0], [0], [1, 2]]\n\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        path = []\n        if not prerequisites:\n            return [i for i in range(numCourses)]\n\n        # deserialize input into graph and also store in-degrees\n        adj_list = [[] for i in range(numCourses)]\n        in_degrees = [0] * numCourses\n        for [course, prereq] in prerequisites:\n            adj_list[prereq].append(course)\n            in_degrees[course] += 1\n        \n        # find starting points (0 in-degree) and add to queue\n        queue = deque([course for course in range(numCourses) if in_degrees[course] == 0])\n        if not queue:\n            return []\n    \n        # bfs. decrement in-degree of all adjacent vertices of current vertex, \n        # and add vertices with 0 in-degree to queue\n        while len(queue) > 0:\n            curr = queue.popleft()\n            if curr not in path:\n                path.append(curr)\n            \n            for course in adj_list[curr]:\n                in_degrees[course] -= 1        \n                if in_degrees[course] == 0:\n                    queue.append(course)\n        \n        # if any vertex still has a non-zero in-degree, the graph is cyclic or disconnected\n        if any(e > 0 for e in in_degrees):\n            return []\n\n        return path","compare_result":"111111111111111111111111111111111111111111111","title_slug":"course-schedule-ii","has_notes":false,"flag_type":1}