{"id":718474813,"lang":"python3","lang_name":"Python3","time":"1 year, 3 months","timestamp":1654819025,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/718474813/","is_pending":"Not Pending","title":"Course Schedule II","memory":"N/A","code":"# [[1,0],[2,0],[3,1],[3,2]]\n# adj_next: [[1, 2], [3], [3], []]\n# adj_pre: [[], [0], [0], [1, 2]]\n\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        # deserialize input into graph\n        adj_next, adj_pre = [[] for i in range(numCourses)], [[] for i in range(numCourses)]\n        [(adj_pre[course].append(prereq), adj_next[prereq].append(course)) for [course, prereq] in prerequisites]\n        # find a starting point\n        start = None\n        for course, prereqs in enumerate(adj_pre):\n            if len(prereqs) == 0:\n                # if there are multiple return []\n                if start is not None:\n                    return []\n                else:\n                    start = course\n        if start is None:\n            return []\n        \n        path = []\n        visited = [False for i in range(numCourses)]\n        stack = [start]\n        # dfs ending when length of output array (path) is equal to numCourses\n        while len(stack) > 0:\n            # for each course, all of its prerequisites must be 'visited' before it can be traversed\n            curr = stack.pop()\n            visited[curr] = True\n            \n            for prereq in adj_next[curr]:\n                if visited[prereq] is False:\n                    stack.append(prereq)\n            \n            path.append(curr)\n            \n        return path\n    ","compare_result":"101011100110110111110010000000001001110100111","title_slug":"course-schedule-ii","has_notes":false,"flag_type":1}