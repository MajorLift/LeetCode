{"id":718716313,"lang":"python3","lang_name":"Python3","time":"1 year, 3 months","timestamp":1654845140,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/718716313/","is_pending":"Not Pending","title":"Course Schedule II","memory":"N/A","code":"# [[1,0],[2,0],[3,1],[3,2]]\n# adj_next: [[1, 2], [3], [3], []]\n# adj_pre: [[], [0], [0], [1, 2]]\n\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        \n        # deserialize input into graph and also store in-degree\n        adj_list = [[] for i in range(numCourses)]\n        in_degrees = [0 for i in range(numCourses)]\n        for [course, prereq] in prerequisites:\n            adj_list[prereq].append(course)\n            in_degrees[course] += 1\n        \n        # find starting points (0 in-degree) and add to queue\n        queue = [course for course in range(numCourses) if in_degrees[course] == 0]\n    \n        # bfs\n        path = []\n        while len(queue) > 0 and len(path) < numCourses:\n            curr = queue.pop(0)\n            path.append(curr)\n\n            for course in adj_list[curr]:\n                if in_degrees[course] > 0:\n                    queue.append(course)\n                    in_degrees[curr] -= 1\n            \n        return path","compare_result":"111111111111110111110010010000100100000000111","title_slug":"course-schedule-ii","has_notes":false,"flag_type":1}