{"id":718592650,"lang":"python3","lang_name":"Python3","time":"1 year, 3 months","timestamp":1654833559,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/718592650/","is_pending":"Not Pending","title":"Course Schedule II","memory":"N/A","code":"# [[1,0],[2,0],[3,1],[3,2]]\n# adj_next: [[1, 2], [3], [3], []]\n# adj_pre: [[], [0], [0], [1, 2]]\n\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        \n        # deserialize input into graph\n        adj_next, adj_pre = [[] for i in range(numCourses)], [[] for i in range(numCourses)]\n        [(adj_pre[course].append(prereq), adj_next[prereq].append(course)) \\\n            for [course, prereq] in prerequisites]\n        \n        # find destination(s)\n        queue = []\n        for course, nexts in enumerate(adj_next):\n            if len(nexts) == 0:\n                queue.append(course)\n        \n        # bfs\n        path = []\n        visited = [False for i in range(numCourses)]\n        while len(queue) > 0:\n            curr = queue.pop(0)\n            if visited[curr] is False:\n                visited[curr] = True\n                path.append(curr)\n\n            for course in adj_pre[curr]:\n                if visited[course] is False:\n                    queue.append(course)\n        \n        return path[::-1]","compare_result":"111111111111101001111111111010100110000000110","title_slug":"course-schedule-ii","has_notes":false,"flag_type":1}