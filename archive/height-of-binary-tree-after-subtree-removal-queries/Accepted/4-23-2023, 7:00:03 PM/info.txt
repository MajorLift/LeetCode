{"id":938705590,"lang":"python3","lang_name":"Python3","time":"4 months, 3 weeks","timestamp":1682301603,"status":10,"status_display":"Accepted","runtime":"1174 ms","url":"/submissions/detail/938705590/","is_pending":"Not Pending","title":"Height of Binary Tree After Subtree Removal Queries","memory":"90.1 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def treeQueries(self, root: Optional[TreeNode], queries: List[int]) -> List[int]:\n        depths, heights = defaultdict(int), defaultdict(int)\n        level = defaultdict(list)\n        \n        def dfs(node, depth):\n            if not node:\n                return -1\n            depths[node.val] = depth\n            height = max(\n                dfs(node.left, depth + 1), \n                dfs(node.right, depth + 1),\n            ) + 1\n            heights[node.val] = height\n            heappush(level[depth], (-height, node.val))\n            return height\n        dfs(root, 0)\n        \n        answer = []\n        for query in queries:\n            depth = depths[query]\n            if len(level[depth]) == 1:\n                answer.append(depth - 1)\n            elif level[depth][0][1] == query:\n                tmp = heappop(level[depth])\n                answer.append(-level[depth][0][0] + depth)\n                heappush(level[depth], tmp)\n            else:\n                answer.append(-level[depth][0][0] + depth)\n        return answer\n            \n        \n            ","compare_result":"1111111111111111111111111111111111111111","title_slug":"height-of-binary-tree-after-subtree-removal-queries","has_notes":false,"flag_type":1}