{"id":859930552,"lang":"java","lang_name":"Java","time":"9Â months","timestamp":1671065748,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/859930552/","is_pending":"Not Pending","title":"Combination Sum","memory":"42.8 MB","code":"class Solution {\n    private List<List<Integer>> output = new ArrayList<>();\n    private int[] input;\n    private int target;\n    \n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        this.input = candidates;\n        this.target = target;\n        backtrack(new ArrayList<>(), 0, this.target);\n        return this.output;\n    }\n\n    private void backtrack(List<Integer> path, int start, int remainder) {\n        if (remainder == 0) {\n            this.output.add(new ArrayList<>(path));\n            return;\n        }\n        for (int i = start; i < this.input.length; ++i) {\n            if (remainder - this.input[i] >= 0) {\n                path.add(this.input[i]);\n                backtrack(path, i, remainder - this.input[i]);\n                path.remove(path.size() - 1);\n            }\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false,"flag_type":1}