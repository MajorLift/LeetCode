{"id":884619677,"lang":"python3","lang_name":"Python3","time":"7 months, 2 weeks","timestamp":1674593574,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/884619677/","is_pending":"Not Pending","title":"Find Servers That Handled Most Number of Requests","memory":"N/A","code":"class Solution:\n    def busiestServers(self, k: int, arrival: List[int], load: List[int]) -> List[int]:\n        cnt = defaultdict(int)\n        busy = []\n        available = [_id for _id in range(k)]\n        for i, (start, duration) in enumerate(zip(arrival, load)):\n            while busy and start >= busy[0][0]:\n                server_end, server_id = heappop(busy)\n                available.append(server_id)\n            if not available:\n                continue\n            idx = bisect_left(available, i % k)\n            assigned_id = available[idx] if idx < len(available) else available[0]\n            available.remove(assigned_id)            \n            cnt[assigned_id] += 1\n            heappush(busy, (start + duration, assigned_id))\n        return [k for k, v in cnt.items() if v == max(cnt.values())]","compare_result":"111111111111100101010010001001110110000000000000010000100000100000000000000000000000010000000000000000000000","title_slug":"find-servers-that-handled-most-number-of-requests","has_notes":false,"flag_type":1}