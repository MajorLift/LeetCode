{"id":941799338,"lang":"python3","lang_name":"Python3","time":"4 months, 2 weeks","timestamp":1682808463,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/941799338/","is_pending":"Not Pending","title":"Path With Minimum Effort","memory":"N/A","code":"class Solution:\r\n    def minimumEffortPath(self, heights: List[List[int]]) -> int:\r\n        m, n = map(len, (heights, heights[0]))\r\n        DIRECTIONS = ((0, 1), (1, 0), (0, -1), (-1, 0))\r\n        \r\n        def dfs(r, c, effort, visited):\r\n            if (r, c) == (m - 1, n - 1):\r\n                return True\r\n            visited |= 1 << r * m + c\r\n            for i, j in (map(sum, zip((r, c), d)) for d in DIRECTIONS):\r\n                if not (0 <= i < m and 0 <= j < n) \\\r\n                    or visited & 1 << i * m + j \\\r\n                    or abs(heights[i][j] - heights[r][c]) > effort:\r\n                    continue\r\n                if dfs(i, j, effort, visited):\r\n                    return True\r\n            return False\r\n\r\n        return bisect_left(list(range(10 ** 6)), True, \r\n            key=lambda x: dfs(0, 0, x, 0))\r\n","compare_result":"111111111111111000000000000000000000000000000000000000000000000000000000000","title_slug":"path-with-minimum-effort","has_notes":false,"flag_type":1}