{"id":941791254,"lang":"python3","lang_name":"Python3","time":"4 months, 2 weeks","timestamp":1682806195,"status":10,"status_display":"Accepted","runtime":"2290 ms","url":"/submissions/detail/941791254/","is_pending":"Not Pending","title":"Path With Minimum Effort","memory":"26.6 MB","code":"class Solution:\r\n    def minimumEffortPath(self, heights: List[List[int]]) -> int:\r\n        m, n = map(len, (heights, heights[0]))\r\n        if m == n == 1:\r\n            return 0\r\n        DIRECTIONS = ((0, 1), (1, 0), (0, -1), (-1, 0))\r\n        edges = []\r\n        for r, c in product(range(m), range(n)):\r\n            for i, j in (map(sum, zip((r, c), d)) for d in DIRECTIONS):\r\n                if not (0 <= i < m and 0 <= j < n):\r\n                    continue\r\n                edges.append((abs(heights[r][c] - heights[i][j]), (r, c), (i, j)))\r\n        edges.sort()\r\n\r\n        uf = UnionFind(m, n)\r\n        for effort, x, y in edges:\r\n            uf.union(x, y)\r\n            if uf.isConnected((0, 0), (m - 1, n - 1)):\r\n                return effort\r\n        return -1\r\n        \r\n\r\nclass UnionFind:\r\n    def __init__(self, m, n):\r\n        self.roots = [[(i, j) for j in range(n)] for i in range(m)]\r\n        self.rank = [[0] * n for _ in range(m)]\r\n        \r\n    def find(self, x):\r\n        i, j = x\r\n        if self.roots[i][j] == (i, j):\r\n            return (i, j)\r\n        self.roots[i][j] = self.find(self.roots[i][j])\r\n        return self.roots[i][j]\r\n\r\n    def union(self, x, y):\r\n        rootX, rootY = self.find(x), self.find(y)\r\n        if rootX != rootY:\r\n            (xi, xj), (yi, yj) = rootX, rootY\r\n            if self.rank[xi][xj] < self.rank[yi][yj]:\r\n                self.roots[yi][yj] = rootX\r\n            elif self.rank[xi][xj] > self.rank[yi][yj]:\r\n                self.roots[xi][xj] = rootY\r\n            else:\r\n                self.roots[yi][yj] = rootX\r\n                self.rank[xi][xj] += 1\r\n\r\n    def isConnected(self, x, y):\r\n        return self.find(x) == self.find(y)","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-with-minimum-effort","has_notes":true,"flag_type":1}