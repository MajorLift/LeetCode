{"id":941795160,"lang":"python3","lang_name":"Python3","time":"4 months, 2 weeks","timestamp":1682807237,"status":10,"status_display":"Accepted","runtime":"3033 ms","url":"/submissions/detail/941795160/","is_pending":"Not Pending","title":"Path With Minimum Effort","memory":"29.1 MB","code":"class Solution:\r\n    def minimumEffortPath(self, heights: List[List[int]]) -> int:\r\n        m, n = map(len, (heights, heights[0]))\r\n        DIRECTIONS = ((0, 1), (1, 0), (0, -1), (-1, 0))\r\n        \r\n        def dfs(r, c, effort):\r\n            if (r, c) == (m - 1, n - 1):\r\n                return True\r\n            visited.add((r, c))\r\n            flag = False\r\n            for i, j in (map(sum, zip((r, c), d)) for d in DIRECTIONS):\r\n                if not (0 <= i < m and 0 <= j < n) \\\r\n                    or (i, j) in visited \\\r\n                    or abs(heights[i][j] - heights[r][c]) > effort:\r\n                    continue\r\n                flag = flag or dfs(i, j, effort)\r\n            return flag\r\n\r\n        lo, hi = 0, 10 ** 6\r\n        while lo < hi:\r\n            mid = (lo + hi) // 2\r\n            visited = set()\r\n            if dfs(0, 0, mid):\r\n                hi = mid\r\n            else:\r\n                lo = mid + 1\r\n        return lo","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-with-minimum-effort","has_notes":false,"flag_type":1}