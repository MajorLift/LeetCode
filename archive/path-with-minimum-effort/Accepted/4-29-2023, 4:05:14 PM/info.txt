{"id":941802632,"lang":"python3","lang_name":"Python3","time":"4 months, 2 weeks","timestamp":1682809514,"status":10,"status_display":"Accepted","runtime":"939 ms","url":"/submissions/detail/941802632/","is_pending":"Not Pending","title":"Path With Minimum Effort","memory":"17.7 MB","code":"class Solution:\r\n    def minimumEffortPath(self, heights: List[List[int]]) -> int:\r\n        m, n = map(len, (heights, heights[0]))\r\n        DIRECTIONS = ((0, 1), (1, 0), (0, -1), (-1, 0))\r\n        dist = [[+inf] * n for _ in range(m)]\r\n        dist[0][0] = 0\r\n        pq = [(0, 0, 0)]\r\n        while pq:\r\n            _, r, c = heappop(pq)\r\n            if (r, c) == (m - 1, n - 1):\r\n                break\r\n            for i, j in (map(sum, zip(d, (r, c))) for d in DIRECTIONS):\r\n                if not (0 <= i < m and 0 <= j < n):\r\n                    continue\r\n                new_effort = max(dist[r][c], abs(heights[i][j] - heights[r][c]))\r\n                if dist[i][j] > new_effort:\r\n                    dist[i][j] = new_effort\r\n                    heappush(pq, (dist[i][j], i, j))\r\n        return dist[-1][-1]","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-with-minimum-effort","has_notes":true,"flag_type":1}