{"id":807906271,"lang":"python3","lang_name":"Python3","time":"11 months, 3 weeks","timestamp":1664072660,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/807906271/","is_pending":"Not Pending","title":"Graph Valid Tree","memory":"N/A","code":"class UnionFind:\n    def __init__(self, size):\n        self.root = [i for i in range(size)]\n        \n    def find(self, x):\n        rootX = x\n        while self.root[rootX] != rootX:\n            rootX = self.root[rootX]\n        while x != rootX:\n            parent = self.root[x]\n            self.root[x] = rootX\n            x = parent\n        return rootX\n        \n    def union(self, x, y):\n        rootX, rootY = self.find(x), self.find(y)\n        if rootX != rootY:\n            self.root[rootY] = rootX\n        \n    def isConnected(self, x, y):\n        return self.root[x] == self.root[y]\n        \nclass Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        if len(edges) != n - 1:\n            return False\n        uf = UnionFind(n)\n        for [x, y] in edges:\n            if uf.isConnected(x, y):\n                return False\n            else:\n                uf.union(x, y)\n        return True","compare_result":"111111110111111111111111101111111111111111111","title_slug":"graph-valid-tree","has_notes":false,"flag_type":1}