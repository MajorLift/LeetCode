{"id":935630004,"lang":"python3","lang_name":"Python3","time":"4 months, 3 weeks","timestamp":1681797639,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/935630004/","is_pending":"Not Pending","title":"Step-By-Step Directions From a Binary Tree Node to Another","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getDirections(self, root: Optional[TreeNode], startValue: int, destValue: int) -> str:\n        self.root = root\n        sPath, dPath = self.getPath(root, startValue), self.getPath(root, destValue)\n        lca = self.getLCA(sPath, dPath)\n        sPath, dPath = sPath[lca:], dPath[lca:]\n        return ''.join(['U'] * len(sPath) + dPath)\n\n    def getPath(self, curr, target, path=[]):\n        if not curr:\n            return False\n        if curr.val == target:\n            return path\n        return self.getPath(curr.left, target, path + ['L']) \\\n            or self.getPath(curr.right, target, path + ['R'])\n\n    def getLCA(self, aPath, bPath):\n        for i, (a, b) in enumerate(zip(aPath, bPath)):\n            if a != b:\n                return max(i - 1, 0)\n        return 0\n            \n        ","compare_result":"11111110101000001110101001011011000000100100110011000100100001101010001101000000000000100011001001000000110000000101000000001000001010101110001000000010010100010000001001100000000000100000000100001000000100000000001001011001100100010100010100000010100001000000000000100000001001110011111000000000000000000000000000000000000000000000","title_slug":"step-by-step-directions-from-a-binary-tree-node-to-another","has_notes":false,"flag_type":1}