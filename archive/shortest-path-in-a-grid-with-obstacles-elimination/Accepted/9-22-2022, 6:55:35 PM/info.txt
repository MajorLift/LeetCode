{"id":806501433,"lang":"python3","lang_name":"Python3","time":"11 months, 3 weeks","timestamp":1663898135,"status":10,"status_display":"Accepted","runtime":"132 ms","url":"/submissions/detail/806501433/","is_pending":"Not Pending","title":"Shortest Path in a Grid with Obstacles Elimination","memory":"15.3 MB","code":"class Solution:\n    def shortestPath(self, grid: List[List[int]], k: int) -> int:\n        m, n = len(grid), len(grid[0])\n        \n        def manhattan_dist(i, j):\n            return (m - 1 - i) + (n - 1 -j)\n        \n        curr, steps, rem_elims, estimation = (0, 0), 0, k, manhattan_dist(0, 0)\n        pq = [(estimation, steps, rem_elims, curr)]\n        seen = set([(curr, rem_elims)])\n        \n        while pq:\n            estimation, steps, rem_elims, (i, j) = heapq.heappop(pq)\n            if estimation - steps <= rem_elims:\n                return estimation\n            for row, col in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)):\n                if (0 <= row < m) and (0 <= col < n):\n                    new_elims = rem_elims - grid[row][col]\n                    if new_elims >= 0 and ((row, col), new_elims) not in seen:\n                        seen.add(((row, col), new_elims))\n                        new_steps = steps + 1\n                        heapq.heappush(pq, (manhattan_dist(row, col) + new_steps, new_steps, new_elims, (row, col)))\n        return -1","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-a-grid-with-obstacles-elimination","has_notes":false,"flag_type":1}