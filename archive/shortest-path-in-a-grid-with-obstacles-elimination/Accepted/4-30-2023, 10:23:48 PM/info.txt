{"id":942432517,"lang":"python3","lang_name":"Python3","time":"4 months, 2 weeks","timestamp":1682918628,"status":10,"status_display":"Accepted","runtime":"93 ms","url":"/submissions/detail/942432517/","is_pending":"Not Pending","title":"Shortest Path in a Grid with Obstacles Elimination","memory":"17.6 MB","code":"class Solution:\n    def shortestPath(self, grid: List[List[int]], k: int) -> int:\n        m, n = map(len, (grid, grid[0]))\n        DIRECTIONS = ((0, 1), (1, 0), (0, -1), (-1, 0))\n        SRC, DST = (0, 0), (m - 1, n - 1)\n        self.total = sum(DST)\n\n        pq = [(self.manhattan(*SRC), 0, 0, SRC)]\n        visited = set([(*SRC, 0)])\n        while pq:\n            heuristic, removals, steps, (r, c) = heappop(pq)\n            if removals + self.manhattan(r, c) <= k:\n                return heuristic\n            if (r, c) == DST:\n                return heuristic\n            for i, j in (map(sum, zip((r, c), d)) for d in DIRECTIONS):\n                if not (0 <= i < m and 0 <= j < n):\n                    continue\n                removals_uv = removals + grid[i][j]\n                if removals_uv <= k and (i, j, removals_uv) not in visited:\n                    visited.add((i, j, removals_uv))\n                    heappush(pq, (\n                        self.manhattan(i, j) + steps + 1, \n                        removals_uv, \n                        steps + 1, \n                        (i, j)))\n\n        return -1            \n\n    def manhattan(self, x, y):\n        return self.total - sum((x, y))","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-a-grid-with-obstacles-elimination","has_notes":false,"flag_type":1}