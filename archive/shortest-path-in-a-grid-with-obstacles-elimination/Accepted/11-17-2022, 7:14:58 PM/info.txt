{"id":845560673,"lang":"python3","lang_name":"Python3","time":"9 months, 4 weeks","timestamp":1668741298,"status":10,"status_display":"Accepted","runtime":"142 ms","url":"/submissions/detail/845560673/","is_pending":"Not Pending","title":"Shortest Path in a Grid with Obstacles Elimination","memory":"15.3 MB","code":"class Solution:\n    def shortestPath(self, grid: List[List[int]], k: int) -> int:\n        m, n = len(grid), len(grid[0])\n        \n        def manhattan_dist(i, j):\n            return (m - 1 - i) + (n - 1 - j)\n        \n        estimation, steps, elims, cell = manhattan_dist(0, 0), 0, 0, (0, 0)\n        pq = [(estimation, steps, elims, cell)]\n        visited = {(cell, elims)}\n        while pq:\n            estimation, steps, elims, (x, y) = heapq.heappop(pq)\n            if estimation - steps <= k - elims:\n                return estimation\n            for i, j in (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1):\n                if 0 <= i < m and 0 <= j < n:\n                    next_elims = elims + grid[i][j]\n                    if next_elims <= k and ((i, j), next_elims) not in visited:\n                        visited.add(((i, j), next_elims))\n                        heapq.heappush(pq, (manhattan_dist(i, j) + steps + 1, steps + 1, next_elims, (i, j)))\n        return -1","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-a-grid-with-obstacles-elimination","has_notes":false,"flag_type":1}