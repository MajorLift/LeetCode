{"id":942430704,"lang":"python3","lang_name":"Python3","time":"4 months, 2 weeks","timestamp":1682918347,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/942430704/","is_pending":"Not Pending","title":"Shortest Path in a Grid with Obstacles Elimination","memory":"N/A","code":"class Solution:\n    def shortestPath(self, grid: List[List[int]], k: int) -> int:\n        m, n = map(len, (grid, grid[0]))\n        DIRECTIONS = ((0, 1), (1, 0), (0, -1), (-1, 0))\n        SRC, DST = (0, 0), (m - 1, n - 1)\n        self.total = sum(DST)\n        \n        dist = [[(+inf, +inf)] * n for _ in range(m)]\n        dist[0][0] = (0, 0)\n        pq = [(self.manhattan(*SRC), 0, SRC)]\n        while pq:\n            heuristic, removals, (r, c) = heappop(pq)\n            if removals + self.manhattan(r, c) <= k:\n                return heuristic\n            if (r, c) == DST:\n                break\n            for i, j in (map(sum, zip((r, c), d)) for d in DIRECTIONS):\n                if not (0 <= i < m and 0 <= j < n):\n                    continue\n                removals_uv = removals + grid[i][j]\n                if removals_uv > k:\n                    continue\n                dist_uv = dist[r][c][0] + 1\n                dist_v, removals_v = dist[i][j]\n                if dist_uv < dist_v:\n                    dist[i][j] = (dist_uv, removals_uv)\n                if dist_uv < dist_v or (dist_uv == dist_v and removals_uv < removals_v):\n                    heappush(pq, (self.manhattan(i, j) + dist_uv, removals_uv, (i, j)))\n\n        return dist[-1][-1][0] if dist[-1][-1][0] < +inf else -1            \n\n    def manhattan(self, x, y):\n        return self.total - sum((x, y))","compare_result":"11111111111111111111111110111111111111111111111110111","title_slug":"shortest-path-in-a-grid-with-obstacles-elimination","has_notes":false,"flag_type":1}