{"id":301303640,"lang":"c","lang_name":"C","time":"3 years, 7 months","timestamp":1581162337,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/301303640/","is_pending":"Not Pending","title":"Pascal's Triangle","memory":"7.3 MB","code":"\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\n\n\nvoid recursive_pascal(int **q, int numRows, int i, int** returnColumnSizes){    \n    if(i >= numRows){\n        return;\n    }\n    q[i] = (int*) malloc(sizeof(int) * (i+1));\n    q[i][0] = 1;\n    q[i][i] = 1;\n    \n    *(*returnColumnSizes + i) = i+1;\n    \n    int j = 1;\n    while(j < i){\n        q[i][j] = q[i-1][j-1] + q[i-1][j];\n        j += 1;\n    }\n        \n    recursive_pascal(q, numRows, i+1, returnColumnSizes);\n}\n\n\nint** generate(int numRows, int* returnSize, int** returnColumnSizes){\n    *returnSize = numRows;\n    int** q = (int**) malloc(sizeof(int*) * numRows);        \n    *returnColumnSizes = (int*) malloc(sizeof(int) * numRows);\n    recursive_pascal(q, numRows, 0, returnColumnSizes);\n    return q;\n}\n\n","compare_result":"111111111111111","title_slug":"pascals-triangle","has_notes":false,"flag_type":1}