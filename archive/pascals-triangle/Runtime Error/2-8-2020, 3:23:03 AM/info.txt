{"id":301300934,"lang":"c","lang_name":"C","time":"3 years, 7 months","timestamp":1581160983,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/301300934/","is_pending":"Not Pending","title":"Pascal's Triangle","memory":"N/A","code":"\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** generate(int numRows, int* returnSize, int** returnColumnSizes){\n    *returnSize = numRows;\n    \n    int** q = (int**) malloc(sizeof(int*) * numRows);    \n    int i = 0;\n    while(i < numRows){\n        q[i] = (int*) malloc(sizeof(int) * (i+1));   //q[i]\n        q[i][0] = 1;    //q[i][0]\n        q[i][i] = 1;    //q[i][i]\n        i += 1;\n    }\n    \n    *returnColumnSizes = (int*) malloc(sizeof(int) * numRows);\n    i = 0;\n    while(i < numRows){\n        returnColumnSizes[i] = i+1;\n        i += 1;\n    }\n    \n    i = 2;\n    while(i < numRows){\n        int j = 1;\n        while(j < i){\n            q[i][j] = q[i-1][j-1] + q[i-1][j];\n            j += 1;\n        }\n        i += 1;\n    }\n    \n    return q;\n}\n\n","compare_result":"000000000000000","title_slug":"pascals-triangle","has_notes":false,"flag_type":1}