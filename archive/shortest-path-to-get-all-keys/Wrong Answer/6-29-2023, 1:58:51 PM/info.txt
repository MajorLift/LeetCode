{"id":982639090,"lang":"python3","lang_name":"Python3","time":"2 months, 2 weeks","timestamp":1688072331,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/982639090/","is_pending":"Not Pending","title":"Shortest Path to Get All Keys","memory":"N/A","code":"class Solution:\n    def shortestPathAllKeys(self, grid: List[str]) -> int:\n        grid = [[*row] for row in grid]\n        m, n = map(len, (grid, grid[0]))\n        DIRECTIONS = ((0, 1), (1, 0), (0, -1), (-1, 0))\n\n        start = (-1, -1)\n        all_keys = 0\n        for i, j in product(range(m), range(n)):\n            if grid[i][j] == \"@\":\n                start = (i, j)\n            if grid[i][j].islower():\n                all_keys |= (1 << (ord(grid[i][j]) - ord('a')))\n\n        visited = defaultdict(set)\n        visited[0].add(start)\n        pq = [(0, 0, start)]\n        while pq:\n            moves, state, (r, c) = heappop(pq)\n            visited[state].add((r, c))\n            if state == all_keys:\n                return moves\n            for i, j in (map(sum, zip((r, c), d)) for d in DIRECTIONS):\n                if not (0 <= i < m and 0 <= j < n) \\\n                    or grid[i][j] == \"#\" \\\n                    or grid[i][j].isupper() and state & (1 << (ord(grid[i][j]) - ord('A'))) == 0 \\\n                    or (i, j) in visited[state]:\n                    continue\n                if grid[i][j].islower():\n                    state |= (1 << (ord(grid[i][j]) - ord('a')))\n                    heappush(pq, ((moves + 1, state, (i, j))))\n                else:\n                    heappush(pq, ((moves + 1, state, (i, j))))\n        return -1","compare_result":"11111101111111010110000111000000000","title_slug":"shortest-path-to-get-all-keys","has_notes":false,"flag_type":1}