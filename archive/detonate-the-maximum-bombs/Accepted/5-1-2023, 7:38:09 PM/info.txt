{"id":942955895,"lang":"python3","lang_name":"Python3","time":"4 months, 1 week","timestamp":1682995089,"status":10,"status_display":"Accepted","runtime":"879 ms","url":"/submissions/detail/942955895/","is_pending":"Not Pending","title":"Detonate the Maximum Bombs","memory":"18.2 MB","code":"class Solution:\n    def maximumDetonation(self, bombs: List[List[int]]) -> int:\n        n = len(bombs)\n        adj = [[] for _ in range(n)]\n        for i, j in product(range(n), range(n)):\n            if i != j and self.inRange(bombs[i], bombs[j]):\n                adj[i].append(j)\n\n        def detonate(node):\n            visited = set()    \n            def dfs(u):\n                visited.add(u)\n                for v in adj[u]:\n                    if v not in visited:\n                        dfs(v)\n            dfs(node)\n            return len(visited)\n\n        return max([detonate(start) \n            for start in range(n)])\n        \n    def inRange(self, s, t):\n        (x1, y1, r1), (x2, y2, r2) = s, t\n        return (x1 - x2) ** 2 + (y1 - y2) ** 2 <= r1 ** 2","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"detonate-the-maximum-bombs","has_notes":true,"flag_type":1}