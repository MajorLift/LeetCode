{"id":938097656,"lang":"python3","lang_name":"Python3","time":"4 months, 3 weeks","timestamp":1682201587,"status":10,"status_display":"Accepted","runtime":"276 ms","url":"/submissions/detail/938097656/","is_pending":"Not Pending","title":"Parallel Courses","memory":"18.6 MB","code":"class Solution:\n    def minimumSemesters(self, n: int, relations: List[List[int]]) -> int:\n        adj, indegree = [[] for _ in range(n + 1)], [-1] + [0] * n\n        for u, v in relations:\n            adj[u].append(v)\n            indegree[v] += 1\n        starts = [i for i,e in enumerate(indegree) if e == 0]\n        if not starts:  # no zero indegree -> entire graph is cycle\n            return -1\n        \n        visited = dict()\n        def dfs(node):\n            if node in visited:\n                return visited[node]\n            # base case: leaf node\n            if not adj[node]:\n                return 1\n            # backtracking for cycle detection:\n            # -1 is returned iff. upstream node is also found downstream\n            visited[node] = -1  # 1) mark\n            output = list(map(dfs, [child for child in adj[node]])) # 2) explore\n            if any(e == -1 for e in output):    # cycle found\n                return -1\n            visited[node] = max(output) + 1     # 3) revert\n            return visited[node]\n\n        output = list(map(dfs, starts))\n        if any(e == -1 for e in output):\n            return -1\n        return max(output)","compare_result":"111111111111111111111111111111111111111","title_slug":"parallel-courses","has_notes":true,"flag_type":1}