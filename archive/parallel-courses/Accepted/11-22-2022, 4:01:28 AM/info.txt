{"id":847991450,"lang":"python3","lang_name":"Python3","time":"9 months, 3 weeks","timestamp":1669118488,"status":10,"status_display":"Accepted","runtime":"673 ms","url":"/submissions/detail/847991450/","is_pending":"Not Pending","title":"Parallel Courses","memory":"18.4 MB","code":"class Solution:\n    # DFS: longest path + detect cycles\n    def minimumSemesters(self, n: int, relations: List[List[int]]) -> int:\n        adj = [[] for _ in range(n)]\n        indegree = [0] * n\n        for u, v in relations:\n            adj[u - 1].append(v - 1)\n            indegree[v - 1] += 1\n        \n        visited = {}\n        def dfs(node):\n            if node in visited:\n                return visited[node]\n            else:\n                visited[node] = -1\n\n            max_length = 1  # if no next courses -> 1 semester\n            for child in adj[node]:\n                length = dfs(child)\n                if length == -1:\n                    return -1\n                else:\n                    max_length = max(max_length, length + 1)\n            visited[node] = max_length\n            return max_length\n        \n        max_length = -1 # if no zero-indegree courses -> invalid\n        for node in [u for u in range(n) if indegree[u] == 0]:\n            length = dfs(node)\n            if length == -1:\n                return -1\n            else:\n                max_length = max(max_length, length)\n        return max_length\n","compare_result":"111111111111111111111111111111111111111","title_slug":"parallel-courses","has_notes":false,"flag_type":1}