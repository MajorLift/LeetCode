{"id":938095150,"lang":"python3","lang_name":"Python3","time":"4 months, 3 weeks","timestamp":1682200914,"status":10,"status_display":"Accepted","runtime":"272 ms","url":"/submissions/detail/938095150/","is_pending":"Not Pending","title":"Parallel Courses","memory":"18.6 MB","code":"class Solution:\n    def minimumSemesters(self, n: int, relations: List[List[int]]) -> int:\n        adj, indegree = [[] for _ in range(n + 1)], [+inf] + [0] * n\n        for u, v in relations:\n            adj[u].append(v)\n            indegree[v] += 1\n        \n        visited = dict()\n        def dfs(node):\n            if node in visited:\n                return visited[node]\n            if not adj[node]:\n                return 1\n            visited[node] = -1\n            output = list(map(dfs, [child for child in adj[node]]))\n            if any(e == -1 for e in output):\n                return -1\n            visited[node] = max(output) + 1\n            return visited[node]\n\n        output = list(map(dfs, [i for i,e in enumerate(indegree) if e == 0]))\n        if not output or any(e == -1 for e in output):\n            return -1\n        return max(output)","compare_result":"111111111111111111111111111111111111111","title_slug":"parallel-courses","has_notes":false,"flag_type":1}