{"id":941833206,"lang":"python3","lang_name":"Python3","time":"4 months, 2 weeks","timestamp":1682819473,"status":10,"status_display":"Accepted","runtime":"1202 ms","url":"/submissions/detail/941833206/","is_pending":"Not Pending","title":"Smallest String With Swaps","memory":"53 MB","code":"class Solution:\n    def smallestStringWithSwaps(self, s, pairs: List[List[int]]) -> str:\n        n, s = len(s), list(s)\n        uf = UnionFind(n)\n        for x, y in pairs:\n            uf.union(x, y)\n            \n        groups = uf.groups()\n        for k,v in groups.items():\n            chars = sorted([s[idx] for idx in v])\n            for idx in v:\n                s[idx] = chars.pop(0)\n        return ''.join(s)\n\nclass UnionFind:\n    def __init__(self, size):\n        self.roots = list(range(size))\n\n    def find(self, x):\n        if self.roots[x] == x:\n            return x\n        self.roots[x] = self.find(self.roots[x])\n        return self.roots[x]\n\n    def union(self, x, y):\n        rootX, rootY = map(self.find, (x, y))\n        if rootX == rootY: \n            return\n        self.roots[rootY] = rootX\n\n    def groups(self):\n        output = defaultdict(list)\n        for node, root in enumerate(self.roots):\n            self.roots[node] = self.find(root)\n            output[self.roots[node]].append(node)\n        return output","compare_result":"111111111111111111111111111111111111","title_slug":"smallest-string-with-swaps","has_notes":false,"flag_type":1}