{"id":720089563,"lang":"python3","lang_name":"Python3","time":"1 year, 3 months","timestamp":1655001642,"status":13,"status_display":"Output Limit Exceeded","runtime":"N/A","url":"/submissions/detail/720089563/","is_pending":"Not Pending","title":"Network Delay Time","memory":"N/A","code":"class Solution:\n    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\n        # convert vertex labels to zero-index\n        times = [(u - 1, v - 1, w) for u, v, w in times]\n        k -= 1\n        print(times)\n        \n        # deserialize input into graph\n        adj_mat = [[-1 for j in range(n)] for i in range(n)]\n        for source, target, weight in times:\n            adj_mat[source][target] = weight\n        \n        dist = [math.inf if i != k else 0 for i in range(n)]\n        visited = [False for _ in range(n)]\n        pq = [(0, k)]\n        print(dist)\n\n        while pq:\n            dist_v, v = heapq.heappop(pq)\n            visited[v] = True\n            for u, weight_u in enumerate(adj_mat[v]):\n                if weight_u == -1:\n                    continue\n                dist[u] = min(dist[u], dist_v + weight_u)\n                if not visited[u]:\n                    heapq.heappush(pq, (dist[u], u))\n            print(dist)\n\n        return max(dist) if math.inf not in dist else -1","compare_result":"1111111111111111111111111111111100000000000000000000","title_slug":"network-delay-time","has_notes":false,"flag_type":1}