{"id":884650671,"lang":"python3","lang_name":"Python3","time":"7 months, 2 weeks","timestamp":1674598311,"status":10,"status_display":"Accepted","runtime":"2740 ms","url":"/submissions/detail/884650671/","is_pending":"Not Pending","title":"Network Delay Time","memory":"16.6 MB","code":"class Solution:\n    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\n        adj = [[-1 for _ in range(n + 1)] for _ in range(n + 1)]\n        for u, v, w in times:\n            adj[u][v] = w\n        \n        mst = set()\n        dist = [-math.inf] + [0 if i == k else +math.inf for i in range(1, n + 1)]\n        pq = [(dist[k], k)]\n        while pq:\n            _, u = heappop(pq)\n            mst.add(u)\n            for v, w in enumerate(adj[u]):\n                if w < 0:\n                    continue\n                if v not in mst:\n                    hasDup = False\n                    for i in range(len(pq)):\n                        if v == pq[i][1] and w < pq[i][0]:\n                            pq[i] = (w, v)\n                            heapify(pq)\n                            hasDup = True\n                            break\n                    if not hasDup:\n                        heappush(pq, (w, v))\n                if dist[u] + w < dist[v]:\n                    dist[v] = dist[u] + w\n\n        if all(x < +math.inf for x in dist):\n            return max(dist)\n        return  -1\n","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"network-delay-time","has_notes":false,"flag_type":1}