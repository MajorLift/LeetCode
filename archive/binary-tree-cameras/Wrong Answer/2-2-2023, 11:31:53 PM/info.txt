{"id":890556309,"lang":"python3","lang_name":"Python3","time":"7 months, 1 week","timestamp":1675409513,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/890556309/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def minCameraCover(self, root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        @cache\n        def dp(node):\n            if not node:\n                return 0\n            subchilds = []\n            if node.left:\n                subchilds += [node.left.left, node.left.right]\n            if node.right:\n                subchilds += [node.right.left, node.right.right]\n            return 1 + sum([dp(v) for v in subchilds])\n        return min(dp(root), sum([dp(root.left), dp(root.right)]))","compare_result":"111111111111111111111111111111111111111111111111111111111111111111100101000000011111111010011001001000000000110010100011000000000001000000100001001000000000000000000000000","title_slug":"binary-tree-cameras","has_notes":false,"flag_type":1}