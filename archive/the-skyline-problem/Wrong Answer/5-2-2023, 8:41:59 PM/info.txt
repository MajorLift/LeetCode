{"id":943576828,"lang":"python3","lang_name":"Python3","time":"4 months, 1 week","timestamp":1683085319,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/943576828/","is_pending":"Not Pending","title":"The Skyline Problem","memory":"N/A","code":"class Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n        intervals = []\n        maxr = -inf\n        for l, r, h in buildings:\n            maxr = max(maxr, r)\n            heappush(intervals, (l, h, 'LEFT'))\n            heappush(intervals, (r, h, 'RIGHT'))\n        \n        output = [[0, 0]]\n        pq, visited = [], set()\n        for pos in range(maxr):\n            while intervals and intervals[0][0] == pos:\n                _, h, _type = heappop(intervals)\n                if _type == 'LEFT':\n                    heappush(pq, -h)\n                if _type == 'RIGHT':\n                    visited.add(h)\n            while pq and -pq[0] in visited:\n                heappop(pq)\n            if pq and -pq[0] != output[-1][1]:\n                output.append([pos, -pq[0]])\n            if not pq and output[-1][1] != 0:\n                output.append([pos, 0])\n                visited = set()\n        return output[1:] + [[maxr, 0]]","compare_result":"10100000000000000000000000000000000000000","title_slug":"the-skyline-problem","has_notes":false,"flag_type":1}