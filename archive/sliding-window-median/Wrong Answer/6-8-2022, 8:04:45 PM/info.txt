{"id":717767275,"lang":"python3","lang_name":"Python3","time":"1 year, 3 months","timestamp":1654743885,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/717767275/","is_pending":"Not Pending","title":"Sliding Window Median","memory":"N/A","code":"class Solution:\n    def medianSlidingWindow(self, nums: List[int], k: int) -> List[float]:\n        # initialize heaps\n        lo, hi = [], []\n        for i in range(k):\n            heapq.heappush(lo, -nums[i])\n        for j in range(k // 2):\n            heapq.heappush(hi, -heapq.heappop(lo))\n        \n        medians = []\n        invalid = {}\n        for num in nums:\n            if num not in invalid.keys():\n                invalid[num] = 0\n            else:\n                invalid[num] += 1\n        balance = 0\n        \n        for head in range(k, len(nums)):\n            print(head)\n            medians.append(-lo[0] if k % 2 > 0 \\\n                else (-lo[0] + hi[0]) / 2)\n            print(medians[-1])\n            \n            in_num, out_num = nums[head], nums[head - k]\n            print(in_num, out_num)\n            \n            # exit\n            invalid[out_num] += 1\n            if out_num <= -lo[0]:\n                balance -= 1\n            elif len(hi) > 0 and out_num > hi[0]:\n                balance += 1\n            \n            # enter\n            if len(lo) > 0 and in_num <= -lo[0]:\n                heapq.heappush(lo, -in_num)\n                balance += 1\n            else:\n                heapq.heappush(hi, in_num)\n                balance -= 1\n            \n            # re-balance\n            if balance < 0:\n                heapq.heappush(lo, -heapq.heappop(hi))\n                balance += 1\n            elif balance > 0:\n                heapq.heappush(hi, -heapq.heappop(lo))\n                balance -= 1\n            \n            # remove\n            lo_top, hi_top = -lo[0], hi[0] if len(hi) > 0 else None\n            while invalid[lo_top] > 0:\n                heapq.heappop(lo)\n                invalid[lo_top] -= 1\n            while len(hi) > 0 and invalid[hi_top] > 0:\n                heapq.heappop(hi)\n                invalid[hi_top] -= 1\n            \n            print(lo, hi, balance)\n            print(invalid)\n            \n        return medians","compare_result":"000000000000000000000000000000000000000000","title_slug":"sliding-window-median","has_notes":false,"flag_type":1}