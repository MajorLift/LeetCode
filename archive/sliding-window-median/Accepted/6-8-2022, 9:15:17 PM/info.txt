{"id":717808311,"lang":"python3","lang_name":"Python3","time":"1 year, 3 months","timestamp":1654748117,"status":10,"status_display":"Accepted","runtime":"150 ms","url":"/submissions/detail/717808311/","is_pending":"Not Pending","title":"Sliding Window Median","memory":"16.3 MB","code":"class Solution:\n    def medianSlidingWindow(self, nums: List[int], k: int) -> List[float]:\n        medians = []\n        \n        # initialize heap with k elems\n        lo, hi = [], []\n        [heapq.heappush(lo, -nums[i]) for i in range(k)]\n        [heapq.heappush(hi, -heapq.heappop(lo)) for j in range(k // 2)]\n        \n        medians.append(-lo[0] if k % 2 > 0 else (-lo[0] + hi[0]) / 2)\n                \n        invalidated = {num: 0 for num in nums}\n        # iterate over remainder of nums and populate medians\n        for head_idx in range(k, len(nums)):     \n            balance = 0\n            in_num, out_num = nums[head_idx], nums[head_idx - k]\n            # print(in_num, out_num)\n            \n            # exit\n            balance += -1 if out_num <= -lo[0] else +1\n            invalidated[out_num] += 1\n                \n            # enter\n            if len(lo) > 0 and in_num <= -lo[0]:\n                heapq.heappush(lo, -in_num)\n                balance += 1\n            else:\n                heapq.heappush(hi, in_num)\n                balance -= 1\n            \n            # balance\n            if balance < 0:\n                heapq.heappush(lo, -heapq.heappop(hi))\n                balance += 1\n            if balance > 0:\n                heapq.heappush(hi, -heapq.heappop(lo))\n                balance -= 1\n            # print(balance)\n            \n            # removed\n            while invalidated[-lo[0]] > 0:\n                invalidated[-lo[0]] -= 1\n                heapq.heappop(lo)\n            while len(hi) > 0 and invalidated[hi[0]] > 0:\n                invalidated[hi[0]] -= 1\n                heapq.heappop(hi)\n            # print(invalidated)\n            \n            medians.append(-lo[0] if k % 2 > 0 else (-lo[0] + hi[0]) / 2)\n            # print(lo, hi)\n            \n        return medians","compare_result":"111111111111111111111111111111111111111111","title_slug":"sliding-window-median","has_notes":false,"flag_type":1}