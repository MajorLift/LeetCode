{"id":727163450,"lang":"python3","lang_name":"Python3","time":"1 year, 2 months","timestamp":1655770011,"status":10,"status_display":"Accepted","runtime":"67 ms","url":"/submissions/detail/727163450/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"18.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n        # preorder: Root -> Left-sub-pre -> Right-sub-pre\n        # inorder: Left-sub-in -> Root -> Right-sub-in\n        self.preorder = preorder\n        self.rootmap = {val: idx for idx, val in enumerate(inorder)}\n        self.preorder_idx = 0\n        return self.arrToNode(0, len(preorder))\n            \n    def arrToNode(self, left, right):\n        if left >= right:\n            return\n        rootVal = self.preorder[self.preorder_idx]\n        self.preorder_idx += 1\n        return TreeNode(rootVal, \\\n            self.arrToNode(left, self.rootmap[rootVal]), \\\n            self.arrToNode(self.rootmap[rootVal] + 1, right))\n        \n            \n\n            \n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}