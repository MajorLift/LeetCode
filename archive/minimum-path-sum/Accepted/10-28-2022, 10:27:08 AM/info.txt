{"id":832198897,"lang":"python3","lang_name":"Python3","time":"10 months, 2 weeks","timestamp":1666978028,"status":10,"status_display":"Accepted","runtime":"245 ms","url":"/submissions/detail/832198897/","is_pending":"Not Pending","title":"Minimum Path Sum","memory":"15.7 MB","code":"class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j] = grid[i][j] + min(dp[i + 1][j], dp[i][j + 1]) if i < m - 1 and j < n - 1 \\\n                    else grid[i][j] + dp[i + 1][j] if i < m - 1 and j == n - 1 \\\n                    else grid[i][j] + dp[i][j + 1] if i == m - 1 and j < n - 1 \\\n                    else grid[i][j]\n        return dp[0][0]        \n\n        # min_sum = +math.inf\n        # stack = [(grid[0][0], 0, 0)]\n        # visited = set()\n        # while stack:\n        #     curr_sum, x, y = stack.pop()\n        #     if x == m - 1 and y == n - 1:\n        #         min_sum = min(min_sum, curr_sum)\n        #         visited = set()\n        #     for i, j in (x + 1, y), (x, y + 1):\n        #         if 0 <= i < m and 0 <= j < n and (i, j) not in visited:\n        #             stack.append((curr_sum + grid[i][j], i, j))\n        #             visited.add((i, j))\n        # return min_sum","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-path-sum","has_notes":false,"flag_type":1}