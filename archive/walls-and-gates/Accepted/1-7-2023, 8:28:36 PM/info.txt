{"id":873810862,"lang":"python3","lang_name":"Python3","time":"8 months, 1 week","timestamp":1673152116,"status":10,"status_display":"Accepted","runtime":"253 ms","url":"/submissions/detail/873810862/","is_pending":"Not Pending","title":"Walls and Gates","memory":"16.8 MB","code":"class Solution:\n    def wallsAndGates(self, rooms: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify rooms in-place instead.\n        \"\"\"\n        m, n, INF = len(rooms), len(rooms[0]), 2147483647\n        queue = collections.deque([(i, j) for i, j in itertools.product(range(m), range(n)) if rooms[i][j] == 0])\n        while queue:\n            r, c = queue.popleft()\n            for i, j in ((r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)):\n                if 0 <= i < m and 0 <= j < n and rooms[r][c] + 1 < rooms[i][j]:\n                    rooms[i][j] = rooms[r][c] + 1\n                    queue.append((i, j))\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"walls-and-gates","has_notes":false,"flag_type":1}