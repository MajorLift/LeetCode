{"id":884560700,"lang":"python3","lang_name":"Python3","time":"7 months, 2 weeks","timestamp":1674586515,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/884560700/","is_pending":"Not Pending","title":"Meeting Rooms III","memory":"N/A","code":"class Solution:\n    def mostBooked(self, n: int, meetings: List[List[int]]) -> int:\n        meetings.sort(key=lambda x: x[0])\n        rooms = []\n        empty = [(i, 0) for i in range(n)]\n        for start, end in meetings:\n            while rooms and rooms[0][0] <= start:\n                room_end, room_id, room_cnt = heappop(rooms)\n                heappush(empty, (room_id, room_cnt))\n            if empty:\n                empty_id, empty_cnt = heappop(empty)\n                heappush(rooms, (end, empty_id, empty_cnt + 1))\n            else:\n                room_end, room_id, room_cnt = heappop(rooms)\n                heappush(rooms, (room_end + end - start, room_id, room_cnt + 1))\n        return sorted(rooms, key=lambda x: (-x[2], x[1]))[0][1]","compare_result":"1111111111111011111111111111111111111111111111111111111111111111111111111111101111","title_slug":"meeting-rooms-iii","has_notes":false,"flag_type":1}