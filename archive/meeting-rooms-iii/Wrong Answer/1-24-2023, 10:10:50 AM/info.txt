{"id":884532425,"lang":"python3","lang_name":"Python3","time":"7 months, 2 weeks","timestamp":1674583850,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/884532425/","is_pending":"Not Pending","title":"Meeting Rooms III","memory":"N/A","code":"class Solution:\n    def mostBooked(self, n: int, meetings: List[List[int]]) -> int:\n        meetings.sort(key=lambda x: x[0])\n        rooms = []\n        empty = [(-1, i, 0) for i in range(n)]\n        queue = []\n        for start, end in meetings:\n            if queue:\n                _, interval = heappop(queue)\n                if empty:\n                    empty_end, empty_id, empty_cnt = heappop(empty)\n                    heappush(rooms, (empty_end + interval, empty_id, empty_cnt + 1))\n                else:\n                    room_end, room_id, room_cnt = heappop(rooms)\n                    heappush(rooms, (room_end + interval, room_id, room_cnt + 1))\n\n            if rooms and start >= rooms[0][0]:\n                room_end, room_id, room_cnt = heappop(rooms)\n                heappush(rooms, (end, room_id, room_cnt + 1))\n            if empty and (not rooms or start < rooms[0][0]):\n                empty_end, empty_id, empty_cnt = heappop(empty)\n                heappush(rooms, (end, empty_id, empty_cnt + 1))\n            if not empty and start < rooms[0][0]:\n                heappush(queue, (start, end - start))\n                \n        # print(sorted(rooms, key=lambda x: (-x[2], x[1])))\n        return sorted(rooms + empty, key=lambda x: (-x[2], x[1]))[0][1] - 1","compare_result":"1100011100010000000000000000000001000000000100000000000000000000000011001000000000","title_slug":"meeting-rooms-iii","has_notes":false,"flag_type":1}