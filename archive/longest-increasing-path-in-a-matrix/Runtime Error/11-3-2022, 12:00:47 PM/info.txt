{"id":836269109,"lang":"python3","lang_name":"Python3","time":"10 months, 1 week","timestamp":1667502047,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/836269109/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"N/A","code":"class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0 for _ in range(m)] for _ in range(n)]\n\n        def dfs(x, y):\n            nonlocal matrix, dp\n            if dp[x][y] > 0:\n                return dp[x][y]\n            for x_diff, y_diff in (0, 1), (1, 0), (-1, 0), (0, -1):\n                r, c = x + x_diff, y + y_diff\n                if (0 <= r < m and 0 <= c < n and matrix[r][c] > matrix[x][y]):\n                    dp[x][y] = max(dp[x][y], dfs(r, c))\n            dp[x][y] += 1\n            return dp[x][y]\n\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                ans = max(ans, dfs(i, j))                \n        return ans\n        ","compare_result":"111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"longest-increasing-path-in-a-matrix","has_notes":false,"flag_type":1}