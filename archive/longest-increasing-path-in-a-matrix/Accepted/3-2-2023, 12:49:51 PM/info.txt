{"id":907951490,"lang":"python3","lang_name":"Python3","time":"6 months, 1 week","timestamp":1677790191,"status":10,"status_display":"Accepted","runtime":"460 ms","url":"/submissions/detail/907951490/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"14.8 MB","code":"class Solution:\n    \"\"\"\n    Reversed Kahn's Algorithm TopSort\n    source: (r, c)\n    target: (i, j)\n    \"\"\"\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        m, n = len(matrix), len(matrix[0])\n        \n        outdegree = [[0 for _ in range(n)] for _ in range(m)]\n        for r, c in product(range(m), range(n)):\n            for i, j in ((r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)):\n                if 0 <= i < m and 0 <= j < n and matrix[i][j] > matrix[r][c]:\n                    outdegree[r][c] += 1\n\n        leaves = [(i, j) \n            for i, j in product(range(m), range(n)) \n            if outdegree[i][j] == 0]\n        dist = 0\n        while leaves:\n            dist += 1\n            leaves_next = []\n            for i, j in leaves:\n                for r, c in ((i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)):\n                    if 0 <= r < m and 0 <= c < n and matrix[i][j] > matrix[r][c]:\n                        outdegree[r][c] -= 1\n                        if outdegree[r][c] == 0:\n                            leaves_next.append((r, c))\n            leaves = leaves_next\n        return dist\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix","has_notes":true,"flag_type":1}