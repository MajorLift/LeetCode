{"id":907944406,"lang":"python3","lang_name":"Python3","time":"6 months, 1 week","timestamp":1677789003,"status":10,"status_display":"Accepted","runtime":"464 ms","url":"/submissions/detail/907944406/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"18.7 MB","code":"class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        m, n = len(matrix), len(matrix[0])\n        @cache\n        def dfs(r, c):\n            return max(dfs(i, j) + 1 \n                if 0 <= i < m and 0 <= j < n and matrix[i][j] > matrix[r][c] \n                else 1 \n                for i, j in ((r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1)))\n        return max(dfs(i, j) for i, j in product(range(m), range(n)))","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix","has_notes":true,"flag_type":1}