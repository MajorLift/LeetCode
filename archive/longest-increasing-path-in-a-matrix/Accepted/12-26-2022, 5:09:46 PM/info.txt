{"id":866058073,"lang":"python3","lang_name":"Python3","time":"8 months, 2 weeks","timestamp":1672103386,"status":10,"status_display":"Accepted","runtime":"416 ms","url":"/submissions/detail/866058073/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"19.4 MB","code":"from functools import cache\n\nclass Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        m, n = len(matrix), len(matrix[0])\n        \n        @cache\n        def dfs(r, c):\n            max_length = 1\n            for i, j in ((r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)):\n                if 0 <= i < m and 0 <= j < n and matrix[i][j] > matrix[r][c]:\n                    max_length = max(max_length, 1 + dfs(i, j))\n            return max_length\n        \n        return max(dfs(i, j) for i in range(m) for j in range(n))","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix","has_notes":false,"flag_type":1}