{"id":867211245,"lang":"python3","lang_name":"Python3","time":"8 months, 2 weeks","timestamp":1672273773,"status":10,"status_display":"Accepted","runtime":"590 ms","url":"/submissions/detail/867211245/","is_pending":"Not Pending","title":"Number of Islands II","memory":"19.7 MB","code":"class UnionFind:\n    def __init__(self, size):\n        self.count = 0\n        self.root = dict()\n\n    def add(self, x):\n        if x not in self.root:\n            self.root[x] = x\n            self.count += 1\n        \n    def find(self, x):\n        if x not in self.root:\n            return None\n        if x == self.root[x]:\n            return x\n        self.root[x] = self.find(self.root[x])\n        return self.root[x]\n    \n    def union(self, x, y):\n        rootX, rootY = self.find(x), self.find(y)\n        if rootX != rootY:\n            self.root[rootY] = rootX\n            self.count -= 1\n\nclass Solution:\n    def numIslands2(self, m: int, n: int, positions: List[List[int]]) -> List[int]:\n        grid = [[0 for _ in range(n)] for _ in range(m)]\n        uf = UnionFind(m * n)\n        output = [0 for _ in range(len(positions))]\n        for idx, [r, c] in enumerate(positions):\n            grid[r][c] = 1\n            uf.add((r, c))\n            for i, j in ((r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)):\n                if 0 <= i < m and 0 <= j < n and grid[i][j] == 1:\n                    uf.union((r, c), (i, j))\n            output[idx] = uf.count\n        return output","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-islands-ii","has_notes":false,"flag_type":1}