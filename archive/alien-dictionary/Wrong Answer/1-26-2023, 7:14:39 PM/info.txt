{"id":886027988,"lang":"python3","lang_name":"Python3","time":"7 months, 2 weeks","timestamp":1674789279,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/886027988/","is_pending":"Not Pending","title":"Alien Dictionary","memory":"N/A","code":"class Solution:\n    def alienOrder(self, words: List[str]) -> str:\n        all_chars = set(char for word in words for char in word)\n        if len(words) < 2:\n            return \"\".join(all_chars)\n        adj, indegrees = {k: set() for k in all_chars}, {k: 0 for k in all_chars}\n\n        for l, r in zip(words, words[1:]):\n            for u, v in zip(l, r):\n                if u != v:\n                    if v not in adj[u]:\n                        adj[u].add(v)\n                        indegrees[v] += 1\n                    break\n            else:\n                if len(l) > len(r):\n                    return \"\"\n        \n        cycle = defaultdict(bool)\n        output = []\n        def dfs(char):\n            if char in cycle:\n                return cycle[char]\n            cycle[char] = False\n            for node in adj[char]:\n                if not dfs(node):\n                    return False\n            cycle[char] = True\n            output.append(char)\n            return True\n        return \"\".join(output[::-1]) \\\n            if all(dfs(node) for node, indegree in indegrees.items() if indegree == 0) \\\n            else \"\"\n","compare_result":"1111111111111111111111111111011111110111110000111011111011111010010001011111110011011100101011111111111111110111011111110111101","title_slug":"alien-dictionary","has_notes":false,"flag_type":1}