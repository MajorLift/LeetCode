{"id":886032522,"lang":"python3","lang_name":"Python3","time":"7 months, 2 weeks","timestamp":1674790081,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/886032522/","is_pending":"Not Pending","title":"Alien Dictionary","memory":"14 MB","code":"class Solution:\n    def alienOrder(self, words: List[str]) -> str:\n        all_chars = set(char for word in words for char in word)\n        if len(words) < 2:\n            return \"\".join(all_chars)\n        adj = defaultdict(set)\n\n        for l, r in zip(words, words[1:]):\n            for u, v in zip(l, r):\n                if u != v:\n                    if v not in adj[u]:\n                        adj[u].add(v)\n                    break\n            else:\n                if len(l) > len(r):\n                    return \"\"\n        \n        is_cycle = dict()\n        output = []\n        def dfs(node):\n            '''\n            Returns False if input node is part of a cycle.\n            Mutates output list by appending acyclic nodes.\n            '''\n            if node in is_cycle:\n                return is_cycle[node]\n            is_cycle[node] = False\n            for v in adj[node]:\n                if not dfs(v):\n                    return False\n            is_cycle[node] = True\n            output.append(node)\n            return True\n\n        return \"\".join(output[::-1]) \\\n            if all(dfs(char) for char in all_chars) \\\n            else \"\"\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"alien-dictionary","has_notes":false,"flag_type":1}