{"id":1030907720,"lang":"python3","lang_name":"Python3","time":"2 weeks, 4 days","timestamp":1692915327,"status":10,"status_display":"Accepted","runtime":"502 ms","url":"/submissions/detail/1030907720/","is_pending":"Not Pending","title":"Walking Robot Simulation","memory":"22.7 MB","code":"class Solution:\n    DIRECTIONS = ((0, 1), (1, 0), (0, -1), (-1, 0))\n\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n        self.coord = (0, 0)\n        self.dir_idx = 0\n        self.max_dist = 0\n        self.obstacles = set(map(tuple, obstacles))\n        \n        for command in commands:\n            if command == -2:\n                self.dir_idx = (self.dir_idx - 1) % 4\n            elif command == -1:\n                self.dir_idx = (self.dir_idx + 1) % 4\n            else:\n                for k in range(command):\n                    nxt_coord = tuple(map(sum, zip(self.DIRECTIONS[self.dir_idx], self.coord)))\n                    if nxt_coord in self.obstacles:\n                        break\n                    self.coord = nxt_coord\n                    self.max_dist = max(self.max_dist, self.euclid_dist())\n\n        return self.max_dist\n\n    def euclid_dist(self):\n        return sum(map(lambda x: x ** 2, self.coord))\n","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"walking-robot-simulation","has_notes":false,"flag_type":1}