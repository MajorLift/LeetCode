{"id":308012368,"lang":"c","lang_name":"C","time":"3 years, 6 months","timestamp":1583002470,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/308012368/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"N/A","code":"int findMaxIndex(int* nums, int numsSize){\n    int maxVal = 0;\n    int maxIdx = -1;\n    int i = -1;\n    while(++i < numsSize){\n        if(nums[i] > maxVal){\n            maxVal = nums[i];\n            maxIdx = i;\n        }     \n    }\n    return maxIdx;\n}\n    \n\nint minSubArrayLen(int s, int* nums, int numsSize){\n    if(numsSize == 0) return 0;\n    int maxIdx = findMaxIndex(nums, numsSize);\n    int solSize = 1;\n    while(solSize <= maxIdx + 1 || \\\n          solSize <= numsSize - maxIdx){\n        int i = maxIdx - solSize + 1;\n        if(i < 0) i = 0;\n        while(i <= maxIdx && \\\n              i + solSize <= numsSize){\n            int j = 0;\n            int sum = 0;\n            while(j < solSize) sum += nums[i + (j++)]; \n            if(sum >= s) break;\n            i++;\n        }\n        if(i <= maxIdx && \\\n           i + solSize <= numsSize) break;\n        solSize++;\n    }\n    if(solSize > maxIdx + 1 && \\\n       solSize > numsSize - maxIdx) return 0;\n    return solSize;\n}\n\n","compare_result":"111111111111100","title_slug":"minimum-size-subarray-sum","has_notes":false,"flag_type":1}