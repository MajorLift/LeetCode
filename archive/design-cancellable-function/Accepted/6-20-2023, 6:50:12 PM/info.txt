{"id":975983205,"lang":"javascript","lang_name":"JavaScript","time":"2 months, 3 weeks","timestamp":1687312212,"status":10,"status_display":"Accepted","runtime":"65 ms","url":"/submissions/detail/975983205/","is_pending":"Not Pending","title":"Design Cancellable Function","memory":"41.9 MB","code":"/**\n * @param {Generator} generator\n * @return {[Function, Promise]}\n */\nvar cancellable = function(generator) {\n    let cancelFn\n    const cancelPromise = new Promise((_, reject) => cancelFn = () => reject(\"Cancelled\"))\n    cancelPromise.catch(() => {})\n    return [\n        cancelFn,\n        (async () => {\n            let next = generator.next()\n            while (!next.done) {\n                try {\n                    next = generator.next(await Promise.race([next.value, cancelPromise]))\n                } catch(err) {\n                    next = generator.throw(err)\n                }\n            }\n            return next.value\n        })()\n    ]\n};\n\n/**\n * function* tasks() {\n *   const val = yield new Promise(resolve => resolve(2 + 2));\n *   yield new Promise(resolve => setTimeout(resolve, 100));\n *   return val + 1;\n * }\n * const [cancel, promise] = cancellable(tasks());\n * setTimeout(cancel, 50);\n * promise.catch(console.log); // logs \"Cancelled\" at t=50ms\n */","compare_result":"11111111111111111111111","title_slug":"design-cancellable-function","has_notes":false,"flag_type":1}