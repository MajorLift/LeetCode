{"id":859898558,"lang":"java","lang_name":"Java","time":"9Â months","timestamp":1671057738,"status":10,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/859898558/","is_pending":"Not Pending","title":"Combinations","memory":"43.5 MB","code":"class Solution {\n    private List<List<Integer>> output = new ArrayList<>();\n    private int n;\n    private int k;\n\n    public List<List<Integer>> combine(int n, int k) {\n        this.n = n;\n        this.k = k;\n        backtrack(new ArrayList<>(), 1, 0);\n        return this.output;\n    }\n\n    private void backtrack(List<Integer> path, int start, int count) {\n        if (count == this.k) {\n            this.output.add(new ArrayList<>(path));\n            return;\n        }\n        for (int i = start; i <= this.n; ++i) {\n            path.add(i);\n            backtrack(path, i + 1, count + 1);\n            path.remove(path.size() - 1);\n        }\n    }\n}","compare_result":"111111111111111111111111111","title_slug":"combinations","has_notes":false,"flag_type":1}