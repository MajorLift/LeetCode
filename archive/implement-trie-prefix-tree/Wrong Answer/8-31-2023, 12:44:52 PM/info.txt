{"id":1037108478,"lang":"python3","lang_name":"Python3","time":"1 week, 4 days","timestamp":1693511092,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1037108478/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"N/A","code":"class Trie:\n\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word: str) -> None:\n        curr = self.root\n        for char in word:\n            if not curr.children[self.getOrd(char)]:\n                curr.children[self.getOrd(char)] = TrieNode(val=char)\n            curr = curr.children[self.getOrd(char)]\n        curr.isEnd = True\n\n    def search(self, word: str) -> bool:\n        curr = self.root\n        for char in word:\n            if not curr.children[self.getOrd(char)]:\n                return False\n            curr = curr.children[self.getOrd(char)]\n        return curr.isEnd\n\n    def startsWith(self, prefix: str) -> bool:\n        curr = self.root\n        for char in prefix:\n            if not curr.children[self.getOrd(char)]:\n                return False\n            curr = curr.children[self.getOrd(char)]\n        return True\n\n    def getOrd(self, char):\n        return ord(char) - ord('a')\n\nclass TrieNode:\n    def __init__(self, val=None, children=[None] * 26, isEnd=False):\n        self.val = val\n        self.children = children\n        self.isEnd = isEnd\n\n    def __repr__(self):\n        return f'val: {self.val}, children: {self.children}, isEnd: {self.isEnd}'\n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)","compare_result":"1100100000000000","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}