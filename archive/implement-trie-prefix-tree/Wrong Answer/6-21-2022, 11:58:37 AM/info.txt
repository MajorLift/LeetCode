{"id":727844430,"lang":"python3","lang_name":"Python3","time":"1 year, 2 months","timestamp":1655837917,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/727844430/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"N/A","code":"class TrieNode:\n    \n    def __init__(self, char = \"\"):\n        self.char = char\n        self.children = {}\n        self.is_end = False\n\n    def hasChild(self, char: str) -> bool:\n        return char in self.children\n\n    def addChild(self, char: str) -> None:\n        self.children[char] = TrieNode(char)\n\n    def getChild(self, char: str):\n        if not self.hasChild(char):\n            return\n        return self.children[char]\n\n    def isEnd(self) -> bool:\n        return self.is_end\n\n    def setEnd(self) -> None:\n        self.is_end = True\n\nclass Trie:\n\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word: str) -> None:\n        curr = self.root\n        for char in word:\n            if not curr.hasChild(char):\n                curr.addChild(char)\n            curr = curr.getChild(char)\n        curr.setEnd()\n\n    def search(self, word: str) -> bool:\n        curr = self.root\n        for char in word:\n            if curr.hasChild(char):\n                curr = curr.getChild(char)\n            else:\n                break\n        return curr.isEnd()\n\n    def startsWith(self, prefix: str) -> bool:\n        curr = self.root\n        i = 0\n        for char in prefix:\n            if curr.hasChild(char):\n                curr = curr.getChild(char)\n                i += 1\n            else:\n                break\n        return i == len(prefix)\n            \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)","compare_result":"1111111101010000","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}