{"id":1037203265,"lang":"python3","lang_name":"Python3","time":"1 week, 4 days","timestamp":1693522635,"status":10,"status_display":"Accepted","runtime":"231 ms","url":"/submissions/detail/1037203265/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"35.7 MB","code":"class Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word: str) -> None:\n        curr = self.root\n        for char in word:\n            if not curr.hasChild(char):\n                curr.addChild(char)\n            curr = curr.getChild(char)\n        curr.isEnd = True\n\n    def search(self, word: str) -> bool:\n        curr = self.root\n        for char in word:\n            if not curr.hasChild(char):\n                return False\n            curr = curr.getChild(char)\n        return curr.isEnd\n\n    def startsWith(self, prefix: str) -> bool:\n        curr = self.root\n        for char in prefix:\n            if not curr.hasChild(char):\n                return False\n            curr = curr.getChild(char)\n        return True\n\n    @staticmethod\n    def getOrd(char):\n        return ord(char) - ord('a')\n\nclass TrieNode:\n    def __init__(self, val=None):\n        self.val = val\n        self.children = [None] * 26\n        self.isEnd = False\n\n    def __repr__(self):\n        return f'val: {self.val}, children: {self.children}, isEnd: {self.isEnd}'\n\n    def hasChild(self, char):\n        return self.children[Trie.getOrd(char)] is not None\n    \n    def getChild(self, char):\n        return self.children[Trie.getOrd(char)]\n\n    def addChild(self, char):\n        self.children[Trie.getOrd(char)] = TrieNode(char)\n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}