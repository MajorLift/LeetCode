{"id":727889218,"lang":"python3","lang_name":"Python3","time":"1 year, 2 months","timestamp":1655841933,"status":10,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/727889218/","is_pending":"Not Pending","title":"Generate Parentheses","memory":"14.3 MB","code":"class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        output = []\n        def recurse(comb, numOpen, numClose):\n            nonlocal output\n            if numOpen < n:\n                recurse(comb + \"(\", numOpen + 1, numClose)\n                if numClose < numOpen:\n                    recurse(comb + \")\", numOpen, numClose + 1)\n            elif numClose < n:\n                recurse(comb + \")\", numOpen, numClose + 1)\n            else:\n                output.append(comb)\n        recurse(\"(\", 1, 0)\n        return output","compare_result":"11111111","title_slug":"generate-parentheses","has_notes":false,"flag_type":1}