{"id":939205697,"lang":"python3","lang_name":"Python3","time":"4 months, 2 weeks","timestamp":1682376988,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/939205697/","is_pending":"Not Pending","title":"Basic Calculator III","memory":"N/A","code":"class Solution:\n    def calculate(self, s) -> int:\n        self.OPERATORS = set([\"+\", \"-\", \"*\", \"/\"])\n        self.PARENS = set([\"(\", \")\"])\n        self.TOKENS = self.OPERATORS | self.PARENS\n\n        exp = self.parse(s)\n        paren_stack = []\n        r = 0\n        while r < len(exp):\n            if exp[r] == \"(\":\n                paren_stack.append(r)\n            elif exp[r] == \")\":\n                l = paren_stack.pop()\n                exp[l:r+1] = [self.eval_expression(exp[l+1:r])]\n                r = l\n            r += 1\n        return self.eval_expression(exp)\n\n    def parse(self, exp):\n        output = []\n        for char in exp:\n            if char not in self.TOKENS:\n                if not output or output[-1] in self.TOKENS:\n                    output.append(char)\n                elif output[-1] not in self.TOKENS:\n                    output[-1] += char\n            else:\n                if output and output[-1] not in self.TOKENS:\n                    output[-1] = int(output[-1])\n                output.append(char)\n        if output[-1] not in self.TOKENS:\n            output[-1] = int(output[-1])\n        return output\n        \n    def eval_expression(self, exp):\n        op_stack, num_stack = [], []\n        for elem in exp:\n            if elem in self.OPERATORS:\n                op_stack.append(elem)\n            else:\n                if op_stack and op_stack[-1] in (\"*\", \"/\"):\n                    op, num = op_stack.pop(), num_stack.pop()\n                    if op == \"*\":\n                        num_stack.append(num * elem)\n                    if op == \"/\":\n                        num_stack.append(num // elem)\n                else:\n                    num_stack.append(elem)\n        \n        while len(num_stack) > 1:\n            y, x = num_stack.pop(), num_stack.pop()\n            op = op_stack.pop()\n            if op == \"+\":\n                num_stack.append(x + y)\n            if op == \"-\":\n                num_stack.append(x - y)\n\n        return num_stack.pop()","compare_result":"1111111011111111111111000111101110001000011111111111111111111111111111110111101","title_slug":"basic-calculator-iii","has_notes":false,"flag_type":1}