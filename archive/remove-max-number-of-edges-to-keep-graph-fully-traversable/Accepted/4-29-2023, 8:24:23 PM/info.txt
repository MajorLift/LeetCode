{"id":941892441,"lang":"python3","lang_name":"Python3","time":"4 months, 2 weeks","timestamp":1682825063,"status":10,"status_display":"Accepted","runtime":"2408 ms","url":"/submissions/detail/941892441/","is_pending":"Not Pending","title":"Remove Max Number of Edges to Keep Graph Fully Traversable","memory":"75.2 MB","code":"class Solution:\n    def maxNumEdgesToRemove(self, n: int, edges: List[List[int]]) -> int:\n        uf_a, uf_b = UnionFind(n), UnionFind(n)\n        cnt = 0\n        for _type, u, v in edges:\n            if _type == 3:\n                cnt += uf_a.union(u, v) | uf_b.union(u, v)\n        for _type, u, v in edges:\n            if _type == 1:\n                cnt += uf_a.union(u, v)\n            if _type == 2:\n                cnt += uf_b.union(u, v)\n        if uf_a.numGroups == 1 and uf_b.numGroups == 1:\n            return len(edges) - cnt\n        return -1\n\nclass UnionFind:\n    def __init__(self, size):\n        self.roots = list(range(size + 1))\n        self.numGroups = size\n        \n    def find(self, x):\n        if self.roots[x] == x:\n            return x\n        self.roots[x] = self.find(self.roots[x])\n        return self.roots[x]\n    \n    def union(self, x, y):\n        rootX, rootY = map(self.find, (x, y))\n        if rootX == rootY:\n            return 0\n        self.roots[rootY] = rootX\n        self.numGroups -= 1\n        return 1\n    ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-max-number-of-edges-to-keep-graph-fully-traversable","has_notes":false,"flag_type":1}