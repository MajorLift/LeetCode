{"id":858883900,"lang":"java","lang_name":"Java","time":"9Â months","timestamp":1670889687,"status":10,"status_display":"Accepted","runtime":"137 ms","url":"/submissions/detail/858883900/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"61 MB","code":"class MedianFinder {\n    private Queue<Integer> minHeap;\n    private Queue<Integer> maxHeap;\n\n    public MedianFinder() {\n        this.minHeap = new PriorityQueue<>((a, b) -> a - b);\n        this.maxHeap = new PriorityQueue<>((a, b) -> b - a);\n    }\n    \n    public void addNum(int num) {\n        if (this.minHeap.size() > this.maxHeap.size()) {\n            this.minHeap.offer(num);\n            this.maxHeap.offer(this.minHeap.poll());\n        } else {\n            this.maxHeap.offer(num);\n            this.minHeap.offer(this.maxHeap.poll());\n        }\n    }\n    \n    public double findMedian() {\n        if (this.minHeap.size() > this.maxHeap.size()) return this.minHeap.peek();\n        return (this.minHeap.peek() + this.maxHeap.peek()) / 2.0;\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream","has_notes":false,"flag_type":1}