{"id":942894969,"lang":"python3","lang_name":"Python3","time":"4 months, 1 week","timestamp":1682982605,"status":10,"status_display":"Accepted","runtime":"1763 ms","url":"/submissions/detail/942894969/","is_pending":"Not Pending","title":"Path With Maximum Minimum Value","memory":"34.4 MB","code":"class Solution:\n    def maximumMinimumPath(self, grid: List[List[int]]) -> int:\n        self.grid = grid\n        self.m, self.n = map(len, (grid, grid[0]))\n        self.DIRECTIONS = ((0, 1), (1, 0), (0, -1), (-1, 0))\n\n        candidates = sorted(filter(\n            lambda x: x <= min(grid[0][0], grid[-1][-1]),\n            set([e for row in grid for e in row])))\n        lo, hi = 0, len(candidates) - 1\n        while lo < hi:\n            mid = (lo + hi + 1) // 2\n            if self.pathExists(candidates[mid]):\n                lo = mid\n            else:\n                hi = mid - 1\n        return candidates[lo]\n\n    def pathExists(self, score):\n        visited = set()\n        def dfs(r, c):\n            if (r, c) == (self.m - 1, self.n - 1):\n                return True\n            for i, j in (map(sum, zip((r, c), d)) for d in self.DIRECTIONS):\n                if not (0 <= i < self.m and 0 <= j < self.n) \\\n                    or self.grid[i][j] < score \\\n                    or (i, j) in visited:\n                    continue\n                visited.add((i, j))\n                if dfs(i, j):\n                    return True\n            return False\n        return dfs(0, 0)","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-with-maximum-minimum-value","has_notes":true,"flag_type":1}