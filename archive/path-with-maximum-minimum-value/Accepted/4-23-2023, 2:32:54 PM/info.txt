{"id":938641901,"lang":"python3","lang_name":"Python3","time":"4 months, 3 weeks","timestamp":1682285574,"status":10,"status_display":"Accepted","runtime":"6760 ms","url":"/submissions/detail/938641901/","is_pending":"Not Pending","title":"Path With Maximum Minimum Value","memory":"32.4 MB","code":"class Solution:\n    def maximumMinimumPath(self, grid: List[List[int]]) -> int:\n        self.grid = grid\n        self.m, self.n = len(grid), len(grid[0])\n        self.DIRECTIONS = ((1, 0), (0, -1), (-1, 0), (0, 1))\n        \n        vals = sorted(set(grid[i][j] for i, j in product(range(self.m), range(self.n))))\n        candidates = vals[:bisect_right(vals, min(grid[0][0], grid[-1][-1]))]\n        lo, hi = 0, len(candidates) - 1\n        while lo < hi:\n            mid = (lo + hi + 1) // 2\n            if self.has_path(candidates[mid]):\n                lo = mid\n            else:\n                hi = mid - 1\n        return candidates[lo]\n\n    def has_path(self, score):\n        visited = set()\n        def dfs(x, y):\n            if (x, y) == (self.m - 1, self.n - 1):\n                return True\n            visited.add((x, y))\n            for i, j in (map(sum, zip((x, y), d)) for d in self.DIRECTIONS):\n                if not (0 <= i < self.m and 0 <= j < self.n) \\\n                    or self.grid[i][j] < score \\\n                    or (i, j) in visited:\n                    continue\n                if dfs(i, j):\n                    return True\n            return False\n        return dfs(0, 0)\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-with-maximum-minimum-value","has_notes":true,"flag_type":1}