{"id":863503870,"lang":"python3","lang_name":"Python3","time":"8Â months, 3Â weeks","timestamp":1671670581,"status":10,"status_display":"Accepted","runtime":"671 ms","url":"/submissions/detail/863503870/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"30.3 MB","code":"class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        n = len(s)\n        dp = [[False for _ in range(n)] for _ in range(n)]\n        output = []\n        def backtrack(tmp = [], start = 0):\n            if start == n:\n                output.append(tmp)\n            for end in range(start, n):\n                if s[start] == s[end] and (end - start <= 2 or dp[start + 1][end - 1]):\n                    dp[start][end] = True\n                    backtrack(tmp + [s[start:end + 1]], end + 1)\n        backtrack()\n        return output","compare_result":"11111111111111111111111111111111","title_slug":"palindrome-partitioning","has_notes":false,"flag_type":1}