{"id":845571550,"lang":"python3","lang_name":"Python3","time":"9 months, 4 weeks","timestamp":1668742818,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/845571550/","is_pending":"Not Pending","title":"Minimum Cost to Reach Destination in Time","memory":"N/A","code":"class Solution:\n    def minCost(self, maxTime: int, edges: List[List[int]], fees: List[int]) -> int:\n        n = len(fees)\n        adj = [[-1 for _ in range(n)] for _ in range(n)]\n        for u, v, w in edges:\n            adj[u][v] = w\n            adj[v][u] = w\n        min_times = [+math.inf for _ in range(n)]\n        cost, time, city = fees[0], 0, 0\n        pq = [(cost, time, city)]\n        while pq:\n            cost, time, city = heapq.heappop(pq)\n            if city == n - 1:\n                return cost\n            if min_times[city] > time:\n                min_times[city] = time\n                for node, add_time in enumerate(adj[city]):\n                    if add_time < 0 or time + add_time > maxTime:\n                        continue\n                    heapq.heappush(pq, (cost + fees[node], time + add_time, node))\n        return -1","compare_result":"11111111111111111111111111110111111111111111111111111111111111111111111111111110000000000000","title_slug":"minimum-cost-to-reach-destination-in-time","has_notes":false,"flag_type":1}