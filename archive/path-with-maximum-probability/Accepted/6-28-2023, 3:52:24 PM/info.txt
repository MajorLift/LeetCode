{"id":981939278,"lang":"python3","lang_name":"Python3","time":"2 months, 2 weeks","timestamp":1687992744,"status":10,"status_display":"Accepted","runtime":"656 ms","url":"/submissions/detail/981939278/","is_pending":"Not Pending","title":"Path with Maximum Probability","memory":"28 MB","code":"class Solution:\n    def maxProbability(self, n: int, edges: List[List[int]], succProb: List[float], start: int, end: int) -> float:\n        adj = [[] for _ in range(n)]\n        for (u, v), w in zip(edges, succProb):\n            adj[u].append((v, w))\n            adj[v].append((u, w))\n        dist = [0.0] * n\n        dist[start] = 1.0\n        pq = [(-1.0, start)]\n        while pq:\n            dist_u, u = heappop(pq)\n            dist_u *= -1\n            if u == end:\n                return dist_u\n            for v, dist_v in adj[u]:\n                if dist_v == 0.0: continue\n                if dist_u * dist_v > dist[v]:\n                    dist[v] = dist_u * dist_v\n                    heappush(pq, (-dist[v], v))\n        return 0","compare_result":"111111111111111111","title_slug":"path-with-maximum-probability","has_notes":false,"flag_type":1}