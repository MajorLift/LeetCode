{"id":981938789,"lang":"python3","lang_name":"Python3","time":"2Â months, 2Â weeks","timestamp":1687992647,"status":12,"status_display":"Memory Limit Exceeded","runtime":"N/A","url":"/submissions/detail/981938789/","is_pending":"Not Pending","title":"Path with Maximum Probability","memory":"N/A","code":"class Solution:\n    def maxProbability(self, n: int, edges: List[List[int]], succProb: List[float], start: int, end: int) -> float:\n        adj = [[0.0] * n for _ in range(n)]\n        for (u, v), w in zip(edges, succProb):\n            adj[u][v] = w\n            adj[v][u] = w\n        dist = [0.0] * n\n        pq = [(-1.0, start)]\n        while pq:\n            dist_u, u = heappop(pq)\n            dist_u *= -1\n            if u == end:\n                break\n            for v, dist_v in enumerate(adj[u]):\n                if dist_v == 0.0: continue\n                if dist_u * dist_v > dist[v]:\n                    dist[v] = dist_u * dist_v\n                    heappush(pq, (-dist[v], v))\n        return dist[end] if dist[end] < 1.0 else 0.0","compare_result":"111111111111100000","title_slug":"path-with-maximum-probability","has_notes":false,"flag_type":1}