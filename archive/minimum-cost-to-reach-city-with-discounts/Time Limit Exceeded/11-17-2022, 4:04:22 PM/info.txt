{"id":845489015,"lang":"python3","lang_name":"Python3","time":"9 months, 4 weeks","timestamp":1668729862,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/845489015/","is_pending":"Not Pending","title":"Minimum Cost to Reach City With Discounts","memory":"N/A","code":"class Solution:\n    def minimumCost(self, n: int, highways: List[List[int]], discounts: int) -> int:\n        adj = [[-1 for _ in range(n)] for _ in range(n)]\n        for u,v,w in highways:\n            adj[u][v] = w\n            adj[v][u] = w\n        dist = [0] + [+math.inf for _ in range(n - 1)]\n        cost, used_discounts, city = 0, 0, 0\n        pq = [(cost, used_discounts, city)]\n        while pq:\n            # print(dist, pq)\n            cost, used_discounts, city = heapq.heappop(pq)\n            dist[city] = cost\n            if city == n - 1:\n                break\n            for v, w in enumerate(adj[city]):\n                if w < 0:\n                    continue\n                if dist[v] > cost + w:\n                    heapq.heappush(pq, (cost + w, used_discounts, v))\n                if dist[v] > cost + w // 2 and used_discounts < discounts:\n                    heapq.heappush(pq, (cost + w // 2, used_discounts + 1, v))\n        return dist[-1] if dist[-1] < +math.inf else -1","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111000","title_slug":"minimum-cost-to-reach-city-with-discounts","has_notes":false,"flag_type":1}