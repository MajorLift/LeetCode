{"id":807913206,"lang":"python3","lang_name":"Python3","time":"11 months, 3 weeks","timestamp":1664073246,"status":10,"status_display":"Accepted","runtime":"244 ms","url":"/submissions/detail/807913206/","is_pending":"Not Pending","title":"Number of Connected Components in an Undirected Graph","memory":"15.4 MB","code":"class UnionFind:\n    def __init__(self, size):\n        self.count = size\n        self.root = [i for i in range(size)]\n        \n    def find(self, x):\n        if x == self.root[x]:\n            return x\n        self.root[x] = self.find(self.root[x])\n        return self.root[x]\n    \n    def union(self, x, y):\n        rootX, rootY = self.find(x), self.find(y)\n        if rootX != rootY:\n            self.root[rootY] = rootX\n            self.count -= 1\n\nclass Solution:\n    def countComponents(self, n: int, edges: List[List[int]]) -> int:\n        uf = UnionFind(n)\n        for [a, b] in edges:\n            uf.union(a, b)\n        return uf.count","compare_result":"11111111111111111111111111111111111111111111","title_slug":"number-of-connected-components-in-an-undirected-graph","has_notes":false,"flag_type":1}