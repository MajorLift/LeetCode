{"id":939835034,"lang":"python3","lang_name":"Python3","time":"4 months, 2 weeks","timestamp":1682480322,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/939835034/","is_pending":"Not Pending","title":"Largest Color Value in a Directed Graph","memory":"N/A","code":"class Solution:\r\n    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:\r\n        n = len(colors)\r\n        adj, indegree = [[] for _ in range(n)], [0] * n\r\n        for u, v in edges:\r\n            adj[u].append(v)\r\n            indegree[v] += 1\r\n        queue = deque([i for i,e in enumerate(indegree) if e == 0])\r\n        def dfs(node, cnt = defaultdict(int), visited = set()):\r\n            cnt[colors[node]] += 1\r\n            if node in visited:\r\n                return -1\r\n            visited.add(node)\r\n            if not adj[node]:\r\n                return sorted(cnt.items(), key=lambda p: p[1], reverse=True)[0][1]\r\n            ans = -1\r\n            for child in adj[node]:\r\n                res = dfs(child, cnt, visited)\r\n                if res == -1:\r\n                    return -1\r\n                ans = max(ans, res)\r\n            return ans\r\n        return max(list(map(dfs, queue))) if queue else -1","compare_result":"11100000000000000000000000001000111110000000000000000000000000000000000101111101111","title_slug":"largest-color-value-in-a-directed-graph","has_notes":false,"flag_type":1}