{"id":941858204,"lang":"python3","lang_name":"Python3","time":"4 months, 2 weeks","timestamp":1682822675,"status":10,"status_display":"Accepted","runtime":"2768 ms","url":"/submissions/detail/941858204/","is_pending":"Not Pending","title":"Largest Color Value in a Directed Graph","memory":"78.9 MB","code":"class Solution:\r\n    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:\r\n        n = len(colors)\r\n        adj, indegree = [[] for _ in range(n)], [0] * n\r\n        for u, v in edges:\r\n            adj[u].append(v)\r\n            indegree[v] += 1\r\n        \r\n        global_max = -1\r\n        queue = deque([i for i,e in enumerate(indegree) if e == 0])\r\n        seen, cnt = 0, [[0] * 26 for _ in range(n)]\r\n        while queue:\r\n            u = queue.popleft()\r\n            seen += 1\r\n            cnt[u][ord(colors[u]) - ord(\"a\")] += 1\r\n            global_max = max(global_max, cnt[u][ord(colors[u]) - ord(\"a\")])\r\n            for v in adj[u]:\r\n                for color in range(26):\r\n                    cnt[v][color] = max(cnt[v][color], cnt[u][color])\r\n                indegree[v] -= 1\r\n                if indegree[v] == 0:\r\n                    queue.append(v)\r\n\r\n        return global_max if seen == n else -1","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-color-value-in-a-directed-graph","has_notes":true,"flag_type":1}