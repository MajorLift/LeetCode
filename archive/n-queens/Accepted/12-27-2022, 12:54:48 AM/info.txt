{"id":866246790,"lang":"python3","lang_name":"Python3","time":"8 months, 2 weeks","timestamp":1672131288,"status":10,"status_display":"Accepted","runtime":"57 ms","url":"/submissions/detail/866246790/","is_pending":"Not Pending","title":"N-Queens","memory":"14.4 MB","code":"class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        cols, diags, antidiags = set(), set(), set()\n        output = []\n        def backtrack(row, state):\n            if row == n:\n                output.append([\"\".join(row) for row in state])\n                return\n            for col in range(n):\n                if col in cols or row - col in diags or row + col in antidiags:\n                    continue\n                cols.add(col)\n                diags.add(row - col)\n                antidiags.add(row + col)\n                state[row][col] = \"Q\"\n\n                backtrack(row + 1, state)\n                \n                state[row][col] = \".\"\n                cols.remove(col)\n                diags.remove(row - col)\n                antidiags.remove(row + col)\n\n        backtrack(0, [[\".\" for _ in range(n)] for _ in range(n)])\n        return output","compare_result":"111111111","title_slug":"n-queens","has_notes":false,"flag_type":1}