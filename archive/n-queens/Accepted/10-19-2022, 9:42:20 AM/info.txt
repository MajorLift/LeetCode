{"id":826032501,"lang":"python3","lang_name":"Python3","time":"10 months, 4 weeks","timestamp":1666197740,"status":10,"status_display":"Accepted","runtime":"1302 ms","url":"/submissions/detail/826032501/","is_pending":"Not Pending","title":"N-Queens","memory":"14.4 MB","code":"class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        output = []\n        template = [[\".\" for _ in range(n)] for _ in range(n)]\n        valid_init = [[True for _ in range(n)] for _ in range(n)]\n\n        def backtrack(path = [0], row = 0, valid = valid_init):\n            if row == n - 1:\n                res = copy.deepcopy(template)\n                for i, j in enumerate(path):\n                    res[i][j] = \"Q\"\n                row = [\"\".join(r) for r in res]\n                output.append(row)\n                return\n\n            new_valid = copy.deepcopy(valid)\n            for x in range(n):\n                new_valid[row][x] = False # row\n                new_valid[x][path[row]] = False # col\n                if row + x < n:\n                    if path[row] + x < n: # diag\n                        new_valid[row + x][path[row] + x] = False\n                    if path[row] - x >= 0: # anti-diag\n                        new_valid[row + x][path[row] - x] = False\n            for k in range(n):\n                if new_valid[row + 1][k]:\n                    backtrack(path + [k], row + 1, new_valid)\n\n        for i in range(n):\n            backtrack([i])\n        return output","compare_result":"111111111","title_slug":"n-queens","has_notes":false,"flag_type":1}