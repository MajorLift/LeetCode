{"id":847553897,"lang":"python3","lang_name":"Python3","time":"9 months, 3 weeks","timestamp":1669050374,"status":10,"status_display":"Accepted","runtime":"961 ms","url":"/submissions/detail/847553897/","is_pending":"Not Pending","title":"Number of Provinces","memory":"14.3 MB","code":"class UnionFind:\n    def __init__(self):\n        pass\n\n    def union(self, node: int):\n        pass\n\n    def find(self):\n        pass\n\nfrom collections import deque\n    \nclass Solution:\n    def findCircleNum(self, isConnected: List[List[int]]) -> int:\n        n = len(isConnected)\n        visited = [0] * n\n        queue = deque()\n        ans = 0\n        for node in range(n):\n            if visited[node] == 0:\n                ans += 1\n                queue.append(node)\n                while queue:\n                    u = queue.popleft()\n                    visited[u] = 1\n                    for v in range(n):\n                        if isConnected[u][v] == 1 and visited[v] == 0:\n                             queue.append(v)\n        return ans","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false,"flag_type":1}