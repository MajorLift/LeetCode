{"id":807889579,"lang":"python3","lang_name":"Python3","time":"11 months, 3 weeks","timestamp":1664070055,"status":10,"status_display":"Accepted","runtime":"450 ms","url":"/submissions/detail/807889579/","is_pending":"Not Pending","title":"Number of Provinces","memory":"14.4 MB","code":"class UnionFind:\n    def __init__(self, size):\n        self.root = [i for i in range(size)]\n        self.rank = [1] * size\n        self.count = size\n        \n    def find(self, x):\n        if x == self.root[x]:\n            return x\n        self.root[x] = self.find(self.root[x])\n        return self.root[x]\n        \n    def union(self, x, y):\n        rootX, rootY = self.find(x), self.find(y)\n        if rootX != rootY:\n            if self.rank[rootX] > self.rank[rootY]:\n                self.root[rootY] = rootX\n            elif self.rank[rootX] < self.rank[rootY]:\n                self.root[rootX] = rootY\n            else:\n                self.root[rootY] = rootX\n                self.rank[rootX] += 1\n            self.count -= 1\n        \n    def getCount(self):\n        return self.count\n    \nclass Solution:\n    def findCircleNum(self, isConnected: List[List[int]]) -> int:\n        if not isConnected or len(isConnected) == 0:\n            return 0\n        n = len(isConnected)\n        uf = UnionFind(n)\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if isConnected[i][j] == 1:\n                    uf.union(i, j)\n        return uf.getCount()\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false,"flag_type":1}