{"id":941951215,"lang":"python3","lang_name":"Python3","time":"4 months, 2 weeks","timestamp":1682832829,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/941951215/","is_pending":"Not Pending","title":"Delete Nodes And Return Forest","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def delNodes(self, root: Optional[TreeNode], to_delete: List[int]) -> List[TreeNode]:\n        roots = [root]\n        output = [root]\n        for target in to_delete:\n            next_roots = []\n            for start in roots:\n                next_roots.extend(self.find(root, target))\n            roots = next_roots\n            output.extend(next_roots)\n        return output\n        \n    def find(self, curr, target)-> List[TreeNode]:\n        output = []\n        if curr.left:\n            output.extend(self.find(curr.left, target))\n            if curr.val == target:\n                output.append(curr.left)\n                curr.left = None\n        if curr.right:\n            output.extend(self.find(curr.right, target))\n            if curr.val == target:\n                output.append(curr.right)\n                curr.right = None\n        if curr.val == target:\n            curr.val = 'null'\n        return output","compare_result":"111001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"delete-nodes-and-return-forest","has_notes":false,"flag_type":1}