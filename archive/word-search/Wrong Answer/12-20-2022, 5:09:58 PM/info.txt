{"id":862960379,"lang":"python3","lang_name":"Python3","time":"8 months, 3 weeks","timestamp":1671584998,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/862960379/","is_pending":"Not Pending","title":"Word Search","memory":"N/A","code":"class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        m, n = len(board), len(board[0])\n        k = len(word)\n        \n        def backtrack(path, curr, idx):\n            if idx == k - 1:\n                return True\n            x, y = curr\n            for i, j in (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1):\n                if 0 <= i < m and 0 <= j < n \\\n                    and (i, j) not in path \\\n                    and board[i][j] == word[idx + 1]:\n                    path.add((i, j))\n                    if backtrack(path, (i, j), idx + 1):\n                        return True\n                    path.remove((i, j))\n            return False\n\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == word[0]:\n                    if backtrack(set((i, j)), (i, j), 0):\n                        return True\n        return False","compare_result":"1111111101101111111111111111111011111111111111111111111111111110111111101111111111110","title_slug":"word-search","has_notes":false,"flag_type":1}