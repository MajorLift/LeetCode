{"id":863477024,"lang":"javascript","lang_name":"JavaScript","time":"8 months, 3 weeks","timestamp":1671664112,"status":10,"status_display":"Accepted","runtime":"874 ms","url":"/submissions/detail/863477024/","is_pending":"Not Pending","title":"Word Search","memory":"47.8 MB","code":"/**\n * @param {character[][]} board\n * @param {string} word\n * @return {boolean}\n */\nvar exist = function(board, word) {\n    const [m, n] = [board.length, board[0].length]\n    // const wordChars = word.split('').reduce((acc, curr) => (acc[curr] = (acc[curr] || 0) + 1), {})\n    // const boardChars = board.flat().reduce((acc, curr) => (acc[curr] = (acc[curr] || 0) + 1), {})\n    // if (m * n < word.length \n    //     || !Object.keys(wordChars).every((k) => (wordChars[k] <= (boardChars[k] || -math.inf)))) return false\n    \n    function backtrack([x, y], idx) {\n        if (idx === word.length - 1) return true\n        const char = board[x][y]\n        board[x][y] = \"0\"\n        for (const [i, j] of [[x - 1, y], [x + 1, y], [x, y - 1], [x, y + 1]]) {\n            if (!(i >= 0 && i < m && j >= 0 && j < n) || board[i][j] !== word[idx + 1]) continue\n            if (backtrack([i, j], idx + 1)) return true\n        }\n        board[x][y] = char\n        return false\n    }\n\n    for (let i = 0; i < m; ++i) {\n        for (let j = 0; j < n; ++j) {\n            if (board[i][j] == word[0]) {\n                if (backtrack([i, j], 0)) return true\n            }\n        }\n    }\n    return false\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search","has_notes":false,"flag_type":1}