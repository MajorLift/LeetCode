{"id":863464626,"lang":"python3","lang_name":"Python3","time":"8 months, 3 weeks","timestamp":1671661500,"status":10,"status_display":"Accepted","runtime":"1147 ms","url":"/submissions/detail/863464626/","is_pending":"Not Pending","title":"Word Search","memory":"14.1 MB","code":"class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        m, n = len(board), len(board[0])\n        k = len(word)\n\n        word_chars, board_chars = set([*word]), set([e for row in board for e in row])\n        if m * n < k or not board_chars.issuperset(word_chars):\n            return False\n        \n        def backtrack(path: set[tuple[int, int]], curr: tuple[int, int], idx: int):\n            if idx == k - 1:\n                return True\n            x, y = curr\n            path.add(curr)\n            for i, j in ((x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)):\n                if not (0 <= i < m and 0 <= j < n) or board[i][j] != word[idx + 1] or (i, j) in path:\n                    continue\n                if backtrack(path, (i, j), idx + 1):\n                    return True\n            path.remove(curr)\n            return False\n\n        return any([backtrack(set([(start_row, start_col)]), (start_row, start_col), 0) \\\n            for start_row, start_col in \\\n            [(i, j) for i in range(m) for j in range(n) if board[i][j] == word[0]]])","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search","has_notes":false,"flag_type":1}