{"id":863461172,"lang":"python3","lang_name":"Python3","time":"8 months, 3 weeks","timestamp":1671660795,"status":10,"status_display":"Accepted","runtime":"954 ms","url":"/submissions/detail/863461172/","is_pending":"Not Pending","title":"Word Search","memory":"14 MB","code":"class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        m, n = len(board), len(board[0])\n        k = len(word)\n\n        word_chars, board_chars = set([*word]), set([e for row in board for e in row])\n        if m * n < k or not board_chars.issuperset(word_chars):\n            return False\n\n        state = copy.deepcopy(board)\n        def backtrack(coord, idx):\n            x, y = coord\n            if idx == k - 1:\n                return True\n\n            state[x][y] = \"0\"\n            for i, j in ((x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)):\n                if not (0 <= i < m and 0 <= j < n) or state[i][j] != word[idx + 1]:\n                    continue\n                if backtrack((i, j), idx + 1):\n                    return True\n            state[x][y] = board[x][y]\n            return False\n\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == word[0]:\n                    if backtrack((i, j), 0):\n                        return True\n        return False","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search","has_notes":false,"flag_type":1}