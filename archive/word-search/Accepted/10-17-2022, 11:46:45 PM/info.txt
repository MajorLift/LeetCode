{"id":825003918,"lang":"python3","lang_name":"Python3","time":"10 months, 4 weeks","timestamp":1666075605,"status":10,"status_display":"Accepted","runtime":"7925 ms","url":"/submissions/detail/825003918/","is_pending":"Not Pending","title":"Word Search","memory":"14.1 MB","code":"class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        k = len(word)\n        m, n = len(board), len(board[0])\n\n        def backtrack(path, curr):\n            x, y = curr\n            if len(path) == k:\n                return True\n            for i, j in ((x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)):\n                if 0 <= i < m and 0 <= j < n \\\n                    and (i, j) not in path \\\n                    and board[i][j] == word[len(path)]:\n                    path.add((i, j))\n                    if backtrack(path, (i, j)):\n                        return True\n                    path.remove((i, j))\n            return False\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == word[0]:\n                    if backtrack(set([(i, j)]), (i, j)):\n                        return True\n        return False","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search","has_notes":false,"flag_type":1}