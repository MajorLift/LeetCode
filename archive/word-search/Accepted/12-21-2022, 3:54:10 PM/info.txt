{"id":863488694,"lang":"python3","lang_name":"Python3","time":"8 months, 3 weeks","timestamp":1671666850,"status":10,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/863488694/","is_pending":"Not Pending","title":"Word Search","memory":"14 MB","code":"from collections import Counter, defaultdict\n\nclass Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        m, n = len(board), len(board[0])\n        word_cnt, char_coords = Counter(word), defaultdict(set)\n        [char_coords[board[i][j]].add((i, j)) for i in range(m) for j in range(n) \\\n            if board[i][j] in word_cnt]\n        \n        if len(word_cnt) != len(char_coords) or \\\n            not all([word_cnt[k] <= len(char_coords[k]) for k in word_cnt]):\n            return False\n\n        if len(char_coords[word[-1]]) < len(char_coords[word[0]]):\n            word = word[::-1]\n        \n        def backtrack(coord, idx):\n            if idx == len(word) - 1:\n                return True\n            x, y = coord\n            char_coords[word[idx]].remove(coord)\n            for i, j in (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1):\n                if (i, j) not in char_coords[word[idx + 1]]:\n                    continue\n                if backtrack((i, j), idx + 1):\n                    return True\n            char_coords[word[idx]].add(coord)\n            return False\n\n        for i, j in [*char_coords[word[0]]]:\n            if backtrack((i, j), 0):\n                return True\n        return False","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search","has_notes":false,"flag_type":1}