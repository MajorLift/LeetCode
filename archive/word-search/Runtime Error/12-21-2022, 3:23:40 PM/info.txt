{"id":863480902,"lang":"python3","lang_name":"Python3","time":"8 months, 3 weeks","timestamp":1671665020,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/863480902/","is_pending":"Not Pending","title":"Word Search","memory":"N/A","code":"from collections import Counter, defaultdict\n\nclass Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        m, n = len(board), len(board[0])\n        k = len(word)\n        chars, valids = Counter(word), defaultdict(set)\n\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] in chars:\n                    valids[board[i][j]].add((i, j))\n        \n        if len(chars) != len(valids) or not all([chars[k] <= len(valids[k]) for k in chars]):\n            return False\n\n        if len(valids[word[-1]]) < len(valids[word[0]]):\n            word = word[::-1]\n        \n        def backtrack(curr, idx):\n            if idx == k - 1:\n                return True\n            x, y = curr\n            for i, j in (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1):\n                if (i, j) in valids[word[idx]]:\n                    valids[word[idx]].remove((i, j))\n                    if backtrack((i, j), idx + 1):\n                        return True\n                    valids[word[idx]].add((i, j))\n            return False\n\n        for i, j in [*valids[word[0]]]:\n            valids[word[0]].remove((i, j))\n            if backtrack((i, j), 1):\n                return True\n            valids[word[0]].add((i, j))\n        return False","compare_result":"1110000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"word-search","has_notes":false,"flag_type":1}