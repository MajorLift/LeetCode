{"id":863219276,"lang":"python3","lang_name":"Python3","time":"8 months, 3 weeks","timestamp":1671626523,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/863219276/","is_pending":"Not Pending","title":"Word Search","memory":"N/A","code":"class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        m, n = len(board), len(board[0])\n        k = len(word)\n\n        visited = set()\n        def backtrack(curr, idx):\n            x, y = curr\n            if not (0 <= x < m and 0 <= y < n) or board[x][y] != word[idx] or (x, y) in visited:\n                return False\n            if idx == k - 1:\n                return True\n\n            res = False\n            visited.add(curr)\n            for i, j in ((x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)):\n                res = backtrack((i, j), idx + 1)\n                if res:\n                    break\n            visited.remove(curr)\n            return res\n\n        starts = [(i, j) for i in range(m) for j in range(n) if board[i][j] == word[0]]\n        for i, j in starts:\n            if backtrack((i, j), 0):\n                return True\n        return False","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111110","title_slug":"word-search","has_notes":false,"flag_type":1}