{"id":863133769,"lang":"python3","lang_name":"Python3","time":"8 months, 3 weeks","timestamp":1671612453,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/863133769/","is_pending":"Not Pending","title":"Word Search","memory":"N/A","code":"class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        DIRS = ((-1, 0), (1, 0), (0, -1), (0, 1))\n        m, n = len(board), len(board[0])\n        k = len(word)\n        \n        def backtrack(curr, idx):\n            if idx == k - 1:\n                return True\n            x, y = curr\n            char = board[x][y]\n            board[x][y] = \"#\"\n            for offset in DIRS:\n                i, j = tuple(map(sum, zip(curr, offset)))\n                if 0 <= i < m and 0 <= j < n \\\n                    and board[i][j] == word[idx + 1]:\n                    if backtrack((i, j), idx + 1):\n                        return True\n            board[x][y] = char\n            return False\n\n        for x, y in [(i, j) for i in range(m) for j in range(n) if board[i][j] == word[0]]:\n            if backtrack((x, y), 0):\n                return True\n        return False","compare_result":"1111111111111111111111111111111111111111111111000000000000000000000000000000000000000","title_slug":"word-search","has_notes":false,"flag_type":1}