{"id":902554771,"lang":"python3","lang_name":"Python3","time":"6 months, 3 weeks","timestamp":1677018390,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/902554771/","is_pending":"Not Pending","title":"Unique Paths II","memory":"N/A","code":"class Solution:\n    def uniquePathsWithObstacles(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        grid = [[not bool(grid[i][j]) for j in range(n)] for i in range(m)]\n        memo = [[int(i * j == 0) for j in range(n)] for i in range(m)]\n        flag = False\n        for i in range(m):\n            if not grid[i][0]:\n                flag = True\n            if flag:\n                memo[i][0] = not int(flag)\n        flag = False\n        for j in range(n):\n            if not grid[0][j]:\n                flag = True\n            if flag:\n                memo[0][j] = not int(flag)\n                \n        for i, j in product(range(1, m), range(1, n)):\n            memo[i][j] = ((memo[i - 1][j] if grid[i - 1][j] else 0) \n                + (memo[i][j - 1] if grid[i][j - 1] else 0))\n        return memo[-1][-1]","compare_result":"11010100010001111111111101111111111111111","title_slug":"unique-paths-ii","has_notes":false,"flag_type":1}