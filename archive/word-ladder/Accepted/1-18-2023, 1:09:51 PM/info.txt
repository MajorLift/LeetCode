{"id":880805480,"lang":"javascript","lang_name":"JavaScript","time":"7 months, 3 weeks","timestamp":1674076191,"status":10,"status_display":"Accepted","runtime":"164 ms","url":"/submissions/detail/880805480/","is_pending":"Not Pending","title":"Word Ladder","memory":"56.6 MB","code":"/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {number}\n */\nvar ladderLength = function(beginWord, endWord, wordList) {\n    const words = new Set(wordList)\n    const visited = new Set()\n    if (!words.has(endWord)) return 0\n\n    const k = beginWord.length\n    const adj = wordList.reduce((acc, curr) => {\n        for (let i = 0; i < k; ++i) {\n            const pattern = curr.slice(0, i) + \"*\" + curr.slice(i + 1)\n            acc[pattern] = (acc[pattern] ?? []).concat(curr)\n        }\n        return acc\n    }, {})\n    \n    const queue = [beginWord]\n    let dist = 0\n    while (queue.length) {\n        dist++\n        const next_queue = []\n        while (queue.length) {\n            const word = queue.shift()\n            if (word === endWord) return dist\n            for (let i = 0; i < k; ++i) {\n                const pattern = word.slice(0, i) + \"*\" + word.slice(i + 1)\n                for (const s of (adj[pattern] ?? [])) {\n                    if (!visited.has(s) && words.has(s)) {\n                        visited.add(s)\n                        next_queue.push(s)\n                    }\n                }\n            }\n        }\n        queue.push(...next_queue)\n    }\n    return 0\n};","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"word-ladder","has_notes":false,"flag_type":1}