{"id":880808687,"lang":"python3","lang_name":"Python3","time":"7 months, 3 weeks","timestamp":1674076680,"status":10,"status_display":"Accepted","runtime":"139 ms","url":"/submissions/detail/880808687/","is_pending":"Not Pending","title":"Word Ladder","memory":"17.9 MB","code":"class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        words = set(wordList)\n        if endWord not in words:\n            return 0\n            \n        k = len(beginWord)\n        adj = defaultdict(list)\n        for word in words: \n            for i in range(k):\n                pattern = word[:i] + '*' + word[i+1:]\n                adj[pattern].append(word)\n\n        dist = {word: 0 if word == beginWord else +math.inf for word in words}\n        queue = deque([beginWord])\n        level = 0\n        while queue:\n            level += 1\n            next_queue = deque()\n            while queue:\n                word = queue.popleft()\n                if word == endWord:\n                    return level\n                for i in range(k):\n                    pattern = word[:i] + '*' + word[i+1:]\n                    if pattern not in adj:\n                        continue\n                    for s in adj[pattern]:\n                        if level + 1 < dist[s]:\n                            dist[s] = level + 1\n                            next_queue.append(s)\n            queue = next_queue\n        return 0","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"word-ladder","has_notes":false,"flag_type":1}