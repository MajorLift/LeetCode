{"id":880236033,"lang":"python3","lang_name":"Python3","time":"7 months, 3 weeks","timestamp":1674003135,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/880236033/","is_pending":"Not Pending","title":"Word Ladder","memory":"N/A","code":"class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        words, visited = set(wordList), set()\n        queue = collections.deque([beginWord])\n        dist = 0\n        word = endWord\n        while queue:\n            dist += 1\n            next_queue = deque([])\n            while queue:\n                word = queue.popleft()\n                for i in range(len(word)):\n                    for k in range(26):\n                        s = word[:i] + chr(ord(\"a\") + k) + word[i+1:]\n                        if s in words and s not in visited:\n                            visited.add(s)\n                            next_queue.append(s)\n            queue = next_queue\n        return dist if word == endWord else 0","compare_result":"11111000111100111101101001111111100001000101001100","title_slug":"word-ladder","has_notes":false,"flag_type":1}