{"id":870888692,"lang":"python3","lang_name":"Python3","time":"8 months, 1 week","timestamp":1672803899,"status":10,"status_display":"Accepted","runtime":"170 ms","url":"/submissions/detail/870888692/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"16.3 MB","code":"class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        m, n = len(board), len(board[0])\n        if m <= 2 or n <= 2:\n            return\n\n        # mark uncapturable \"O\"s with temp value \"B\"\n        def dfs(r, c):\n            for i, j in ((r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)):\n                if 0 <= i < m and 0 <= j < n and board[i][j] == \"O\":\n                    board[i][j] = \"B\"\n                    dfs(i, j)\n\n        # find \"O\"s on border, and mark all connected squares as uncapturable regions.\n        for i, j in [(i, 0) for i in range(m - 1)] + [(i, n - 1) for i in range(1, m)] \\\n            + [(0, j) for j in range(1, n)] + [(m - 1, j) for j in range(n - 1)]:\n            if board[i][j] == \"O\":\n                board[i][j] = \"B\"\n                dfs(i, j)\n\n        # All remaining \"O\"s can be surrounded. Flip to \"X\". Revert \"B\"s to \"O\"s. \n        for i, j in itertools.product(range(m), range(n)):\n            if board[i][j] == \"O\":\n                board[i][j] = \"X\"\n            elif board[i][j] == \"B\":\n                board[i][j] = \"O\"\n","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"surrounded-regions","has_notes":false,"flag_type":1}