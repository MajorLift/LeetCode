{"id":870876916,"lang":"python3","lang_name":"Python3","time":"8 months, 1 week","timestamp":1672802491,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/870876916/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"N/A","code":"class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        m, n = len(board), len(board[0])\n        if m <= 2 or n <= 2:\n            return\n\n        def dfs(r, c):\n            for i, j in ((r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)):\n                if 0 <= i < m and 0 <= j < n and board[i][j] == \"O\":\n                    board[i][j] = \"B\"\n                    dfs(i, j)\n\n        for i, j in itertools.product((0, m - 1), (0, n - 1)):\n            dfs(i, j) if board[i][j] == \"O\" else None\n\n        for i, j in itertools.product(range(1, m - 1), range(1, n - 1)):\n            board[i][j] = \"X\" if board[i][j] == \"O\" else \"O\" if board[i][j] == \"B\" else \"X\"\n\n        for i, j in itertools.product((0, m - 1), (0, n - 1)):\n            board[i][j] = \"O\" if board[i][j] == \"B\" else \"X\"","compare_result":"1111111000100001000100000000000010100100000000000000100000","title_slug":"surrounded-regions","has_notes":false,"flag_type":1}